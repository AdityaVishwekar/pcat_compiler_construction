
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package edu.uta.pcat;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PcatParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PcatParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PcatParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PcatParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\006\000\002\003" +
    "\006\000\002\003\005\000\002\006\003\000\002\006\004" +
    "\000\002\006\005\000\002\006\004\000\002\046\004\000" +
    "\002\046\003\000\002\044\004\000\002\044\004\000\002" +
    "\044\004\000\002\042\004\000\002\043\004\000\002\040" +
    "\007\000\002\040\011\000\002\041\005\000\002\041\004" +
    "\000\002\036\004\000\002\037\005\000\002\037\004\000" +
    "\002\035\006\000\002\033\004\000\002\034\005\000\002" +
    "\034\004\000\002\032\007\000\002\032\011\000\002\045" +
    "\003\000\002\030\005\000\002\030\006\000\002\031\004" +
    "\000\002\031\003\000\002\027\006\000\002\025\006\000" +
    "\002\025\004\000\002\026\005\000\002\026\004\000\002" +
    "\023\006\000\002\024\005\000\002\024\004\000\002\005" +
    "\006\000\002\005\005\000\002\005\007\000\002\005\010" +
    "\000\002\005\005\000\002\005\007\000\002\005\016\000" +
    "\002\005\010\000\002\005\007\000\002\005\006\000\002" +
    "\005\005\000\002\005\013\000\002\005\016\000\002\005" +
    "\004\000\002\005\005\000\002\005\004\000\002\021\005" +
    "\000\002\021\006\000\002\022\005\000\002\022\004\000" +
    "\002\020\003\000\002\020\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\017\003\000\002\017\006\000" +
    "\002\017\005\000\002\015\006\000\002\015\004\000\002" +
    "\016\005\000\002\016\004\000\002\013\010\000\002\014" +
    "\007\000\002\014\006\000\002\011\004\000\002\011\006" +
    "\000\002\012\005\000\002\012\004\000\002\010\003\000" +
    "\002\010\005\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\004\033\005\001\002\000\004\002\u0109\001" +
    "\002\000\004\024\006\001\002\000\012\012\013\032\012" +
    "\041\014\042\010\001\002\000\004\061\u0108\001\002\000" +
    "\004\004\366\001\002\000\012\012\362\032\012\041\014" +
    "\042\010\001\002\000\004\004\320\001\002\000\026\004" +
    "\056\021\050\022\052\023\055\025\054\034\047\036\062" +
    "\043\051\044\061\062\057\001\002\000\004\004\016\001" +
    "\002\000\012\012\ufff8\032\ufff8\041\ufff8\042\ufff8\001\002" +
    "\000\012\024\uffe5\045\uffe5\061\uffe5\065\uffe5\001\002\000" +
    "\004\010\042\001\002\000\004\024\022\001\002\000\012" +
    "\012\ufff6\032\ufff6\041\ufff6\042\ufff6\001\002\000\006\011" +
    "\025\035\023\001\002\000\004\004\031\001\002\000\004" +
    "\061\030\001\002\000\004\030\026\001\002\000\004\004" +
    "\027\001\002\000\004\061\uffe4\001\002\000\014\010\uffeb" +
    "\012\uffeb\032\uffeb\041\uffeb\042\uffeb\001\002\000\004\060" +
    "\037\001\002\000\004\004\031\001\002\000\006\004\031" +
    "\020\036\001\002\000\006\004\uffe1\020\uffe1\001\002\000" +
    "\006\004\uffe2\020\uffe2\001\002\000\004\061\uffe3\001\002" +
    "\000\004\004\016\001\002\000\004\061\041\001\002\000" +
    "\006\004\uffe0\020\uffe0\001\002\000\004\004\016\001\002" +
    "\000\014\010\044\012\uffee\032\uffee\041\uffee\042\uffee\001" +
    "\002\000\004\004\016\001\002\000\014\010\uffed\012\uffed" +
    "\032\uffed\041\uffed\042\uffed\001\002\000\014\010\uffec\012" +
    "\uffec\032\uffec\041\uffec\042\uffec\001\002\000\004\064\311" +
    "\001\002\000\004\061\310\001\002\000\016\004\074\006" +
    "\100\007\071\027\075\047\070\064\076\001\002\000\004" +
    "\004\263\001\002\000\030\004\056\020\262\021\050\022" +
    "\052\023\055\025\054\034\047\036\062\043\051\044\061" +
    "\062\243\001\002\000\030\004\056\020\256\021\050\022" +
    "\052\023\055\025\054\034\047\036\062\043\051\044\061" +
    "\062\057\001\002\000\016\004\074\006\100\007\071\027" +
    "\075\047\070\064\076\001\002\000\012\045\uffac\063\uffac" +
    "\064\144\066\uffac\001\002\000\004\004\232\001\002\000" +
    "\036\004\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\025\ufffd\034\ufffd\036\ufffd\043\ufffd\044\ufffd\062" +
    "\ufffd\065\ufffd\001\002\000\004\064\215\001\002\000\020" +
    "\004\074\006\100\007\071\027\075\047\070\061\211\064" +
    "\076\001\002\000\010\045\065\063\066\066\064\001\002" +
    "\000\016\004\074\006\100\007\071\027\075\047\070\064" +
    "\076\001\002\000\016\004\074\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\004\004\067\001\002\000" +
    "\120\004\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\025\uffaa\026" +
    "\uffaa\030\uffaa\031\uffaa\034\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\065\uffaa\066\uffaa\067\uffaa\071" +
    "\uffaa\001\002\000\016\004\074\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\062\010\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\026\uff9b\030\uff9b\031\uff9b\037\uff9b\040\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\061\uff9b\062\uff9b\065\uff9b" +
    "\067\uff9b\071\uff9b\001\002\000\062\010\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\026\uffc2\030\uffc2\031\uffc2\037\uffc2\040\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\062\uffc2\065\uffc2" +
    "\067\uffc2\071\uffc2\001\002\000\040\010\103\014\111\026" +
    "\105\031\117\046\110\047\102\050\114\051\104\052\116" +
    "\053\120\054\112\055\115\056\107\057\106\061\205\001" +
    "\002\000\072\010\uffac\013\uffac\014\uffac\015\uffac\026\uffac" +
    "\030\uffac\031\uffac\037\uffac\040\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\061\uffac\062\uffac\063\uffac\064\144\065\uffac\066" +
    "\uffac\067\uffac\070\140\071\uffac\001\002\000\016\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\066\010\uffc1\013\uffc1\014\uffc1\015\uffc1\026" +
    "\uffc1\030\uffc1\031\uffc1\037\uffc1\040\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\061\uffc1\062\uffc1\063\066\065\uffc1\066\064" +
    "\067\uffc1\071\uffc1\001\002\000\062\010\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\026\uff9c\030\uff9c\031\uff9c\037\uff9c\040\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\061\uff9c\062\uff9c\065\uff9c" +
    "\067\uff9c\071\uff9c\001\002\000\040\010\103\014\111\026" +
    "\105\031\117\046\110\047\102\050\114\051\104\052\116" +
    "\053\120\054\112\055\115\056\107\057\106\065\113\001" +
    "\002\000\016\004\074\006\100\007\071\027\075\047\070" +
    "\064\076\001\002\000\016\004\074\006\100\007\071\027" +
    "\075\047\070\064\076\001\002\000\016\004\074\006\100" +
    "\007\071\027\075\047\070\064\076\001\002\000\016\004" +
    "\074\006\100\007\071\027\075\047\070\064\076\001\002" +
    "\000\016\004\074\006\100\007\071\027\075\047\070\064" +
    "\076\001\002\000\016\004\074\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\016\004\074\006\100\007" +
    "\071\027\075\047\070\064\076\001\002\000\016\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\062\010\uffc0\013\uffc0\014\uffc0\015\uffc0\026" +
    "\uffc0\030\uffc0\031\uffc0\037\uffc0\040\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\061\uffc0\062\uffc0\065\uffc0\067\uffc0\071\uffc0" +
    "\001\002\000\016\004\074\006\100\007\071\027\075\047" +
    "\070\064\076\001\002\000\016\004\074\006\100\007\071" +
    "\027\075\047\070\064\076\001\002\000\016\004\074\006" +
    "\100\007\071\027\075\047\070\064\076\001\002\000\016" +
    "\004\074\006\100\007\071\027\075\047\070\064\076\001" +
    "\002\000\016\004\074\006\100\007\071\027\075\047\070" +
    "\064\076\001\002\000\062\010\uffb1\013\uffb1\014\111\015" +
    "\uffb1\026\105\030\uffb1\031\uffb1\037\uffb1\040\uffb1\046\110" +
    "\047\102\050\114\051\104\052\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\061\uffb1\062\uffb1\065\uffb1\067\uffb1" +
    "\071\uffb1\001\002\000\062\010\103\013\uffb7\014\111\015" +
    "\uffb7\026\105\030\uffb7\031\117\037\uffb7\040\uffb7\046\110" +
    "\047\102\050\114\051\104\052\116\053\120\054\112\055" +
    "\115\056\107\057\106\061\uffb7\062\uffb7\065\uffb7\067\uffb7" +
    "\071\uffb7\001\002\000\062\010\uffb4\013\uffb4\014\111\015" +
    "\uffb4\026\105\030\uffb4\031\uffb4\037\uffb4\040\uffb4\046\110" +
    "\047\102\050\114\051\104\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\061\uffb4\062\uffb4\065\uffb4\067\uffb4" +
    "\071\uffb4\001\002\000\062\010\uffb2\013\uffb2\014\111\015" +
    "\uffb2\026\105\030\uffb2\031\uffb2\037\uffb2\040\uffb2\046\110" +
    "\047\102\050\114\051\104\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\061\uffb2\062\uffb2\065\uffb2\067\uffb2" +
    "\071\uffb2\001\002\000\062\010\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\026\uffbb\030\uffbb\031\uffbb\037\uffbb\040\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\061\uffbb\062\uffbb\065\uffbb\067\uffbb" +
    "\071\uffbb\001\002\000\062\010\uffb5\013\uffb5\014\111\015" +
    "\uffb5\026\105\030\uffb5\031\uffb5\037\uffb5\040\uffb5\046\110" +
    "\047\102\050\114\051\104\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\061\uffb5\062\uffb5\065\uffb5\067\uffb5" +
    "\071\uffb5\001\002\000\062\010\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\026\uffb9\030\uffb9\031\uffb9\037\uffb9\040\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\061\uffb9\062\uffb9\065\uffb9\067\uffb9" +
    "\071\uffb9\001\002\000\062\010\uffbd\013\uffbd\014\111\015" +
    "\uffbd\026\105\030\uffbd\031\uffbd\037\uffbd\040\uffbd\046\uffbd" +
    "\047\uffbd\050\114\051\104\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\065\uffbd\067\uffbd" +
    "\071\uffbd\001\002\000\062\010\uffb3\013\uffb3\014\111\015" +
    "\uffb3\026\105\030\uffb3\031\uffb3\037\uffb3\040\uffb3\046\110" +
    "\047\102\050\114\051\104\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\061\uffb3\062\uffb3\065\uffb3\067\uffb3" +
    "\071\uffb3\001\002\000\062\010\uffb0\013\uffb0\014\111\015" +
    "\uffb0\026\105\030\uffb0\031\uffb0\037\uffb0\040\uffb0\046\110" +
    "\047\102\050\114\051\104\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\065\uffb0\067\uffb0" +
    "\071\uffb0\001\002\000\062\010\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\026\uffb8\030\uffb8\031\uffb8\037\uffb8\040\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\061\uffb8\062\uffb8\065\uffb8\067\uffb8" +
    "\071\uffb8\001\002\000\062\010\uffba\013\uffba\014\uffba\015" +
    "\uffba\026\uffba\030\uffba\031\uffba\037\uffba\040\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\061\uffba\062\uffba\065\uffba\067\uffba" +
    "\071\uffba\001\002\000\062\010\103\013\uffb6\014\111\015" +
    "\uffb6\026\105\030\uffb6\031\uffb6\037\uffb6\040\uffb6\046\110" +
    "\047\102\050\114\051\104\052\116\053\120\054\112\055" +
    "\115\056\107\057\106\061\uffb6\062\uffb6\065\uffb6\067\uffb6" +
    "\071\uffb6\001\002\000\062\010\uffbc\013\uffbc\014\111\015" +
    "\uffbc\026\105\030\uffbc\031\uffbc\037\uffbc\040\uffbc\046\uffbc" +
    "\047\uffbc\050\114\051\104\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\061\uffbc\062\uffbc\065\uffbc\067\uffbc" +
    "\071\uffbc\001\002\000\062\010\uffbe\013\uffbe\014\111\015" +
    "\uffbe\026\105\030\uffbe\031\uffbe\037\uffbe\040\uffbe\046\110" +
    "\047\102\050\114\051\104\052\116\053\120\054\112\055" +
    "\115\056\107\057\106\061\uffbe\062\uffbe\065\uffbe\067\uffbe" +
    "\071\uffbe\001\002\000\020\004\160\006\100\007\071\027" +
    "\075\047\070\064\076\071\156\001\002\000\062\010\uffad" +
    "\013\uffad\014\uffad\015\uffad\026\uffad\030\uffad\031\uffad\037" +
    "\uffad\040\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\061\uffad\062" +
    "\uffad\065\uffad\067\uffad\071\uffad\001\002\000\062\010\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\026\uffaf\030\uffaf\031\uffaf\037" +
    "\uffaf\040\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\061\uffaf\062" +
    "\uffaf\065\uffaf\067\uffaf\071\uffaf\001\002\000\062\010\uffae" +
    "\013\uffae\014\uffae\015\uffae\026\uffae\030\uffae\031\uffae\037" +
    "\uffae\040\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\061\uffae\062" +
    "\uffae\065\uffae\067\uffae\071\uffae\001\002\000\020\004\074" +
    "\006\100\007\071\027\075\047\070\064\076\065\146\001" +
    "\002\000\040\010\103\014\111\026\105\031\117\046\110" +
    "\047\102\050\114\051\104\052\116\053\120\054\112\055" +
    "\115\056\107\057\106\062\150\001\002\000\062\010\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\026\uffa8\030\uffa8\031\uffa8\037" +
    "\uffa8\040\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\061\uffa8\062" +
    "\uffa8\065\uffa8\067\uffa8\071\uffa8\001\002\000\006\062\152" +
    "\065\153\001\002\000\016\004\074\006\100\007\071\027" +
    "\075\047\070\064\076\001\002\000\042\010\103\014\111" +
    "\026\105\031\117\046\110\047\102\050\114\051\104\052" +
    "\116\053\120\054\112\055\115\056\107\057\106\062\uffa6" +
    "\065\uffa6\001\002\000\016\004\074\006\100\007\071\027" +
    "\075\047\070\064\076\001\002\000\062\010\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\026\uffa9\030\uffa9\031\uffa9\037\uffa9\040" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\061\uffa9\062\uffa9\065" +
    "\uffa9\067\uffa9\071\uffa9\001\002\000\042\010\103\014\111" +
    "\026\105\031\117\046\110\047\102\050\114\051\104\052" +
    "\116\053\120\054\112\055\115\056\107\057\106\062\uffa7" +
    "\065\uffa7\001\002\000\004\062\177\001\002\000\062\010" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\026\uffa2\030\uffa2\031\uffa2" +
    "\037\uffa2\040\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\061\uffa2" +
    "\062\uffa2\065\uffa2\067\uffa2\071\uffa2\001\002\000\044\010" +
    "\103\014\111\026\105\030\175\031\117\046\110\047\102" +
    "\050\114\051\104\052\116\053\120\054\112\055\115\056" +
    "\107\057\106\062\uff9e\071\uff9e\001\002\000\054\010\uffac" +
    "\014\uffac\026\uffac\030\uffac\031\uffac\045\161\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\062\uffac\063\uffac\064\144\066\uffac\070" +
    "\140\001\002\000\016\004\074\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\040\010\103\014\111\026" +
    "\105\031\117\046\110\047\102\050\114\051\104\052\116" +
    "\053\120\054\112\055\115\056\107\057\106\061\163\001" +
    "\002\000\004\004\172\001\002\000\006\061\166\071\165" +
    "\001\002\000\062\010\uffa5\013\uffa5\014\uffa5\015\uffa5\026" +
    "\uffa5\030\uffa5\031\uffa5\037\uffa5\040\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\061\uffa5\062\uffa5\065\uffa5\067\uffa5\071\uffa5" +
    "\001\002\000\004\004\167\001\002\000\004\045\170\001" +
    "\002\000\016\004\074\006\100\007\071\027\075\047\070" +
    "\064\076\001\002\000\042\010\103\014\111\026\105\031" +
    "\117\046\110\047\102\050\114\051\104\052\116\053\120" +
    "\054\112\055\115\056\107\057\106\061\uffa4\071\uffa4\001" +
    "\002\000\004\045\173\001\002\000\016\004\074\006\100" +
    "\007\071\027\075\047\070\064\076\001\002\000\042\010" +
    "\103\014\111\026\105\031\117\046\110\047\102\050\114" +
    "\051\104\052\116\053\120\054\112\055\115\056\107\057" +
    "\106\061\uffa3\071\uffa3\001\002\000\016\004\074\006\100" +
    "\007\071\027\075\047\070\064\076\001\002\000\042\010" +
    "\103\014\111\026\105\031\117\046\110\047\102\050\114" +
    "\051\104\052\116\053\120\054\112\055\115\056\107\057" +
    "\106\062\uff9d\071\uff9d\001\002\000\016\004\074\006\100" +
    "\007\071\027\075\047\070\064\076\001\002\000\006\062" +
    "\202\071\201\001\002\000\062\010\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\026\uffa1\030\uffa1\031\uffa1\037\uffa1\040\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1\065\uffa1\067" +
    "\uffa1\071\uffa1\001\002\000\016\004\074\006\100\007\071" +
    "\027\075\047\070\064\076\001\002\000\006\062\uffa0\071" +
    "\uffa0\001\002\000\006\062\uff9f\071\uff9f\001\002\000\036" +
    "\004\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\025\uffd8\034\uffd8\036\uffd8\043\uffd8\044\uffd8\062\uffd8" +
    "\065\uffd8\001\002\000\062\010\103\013\uffbf\014\111\015" +
    "\uffbf\026\105\030\uffbf\031\117\037\uffbf\040\uffbf\046\110" +
    "\047\102\050\114\051\104\052\116\053\120\054\112\055" +
    "\115\056\107\057\106\061\uffbf\062\uffbf\065\uffbf\067\uffbf" +
    "\071\uffbf\001\002\000\040\010\103\014\111\026\105\031" +
    "\117\046\110\047\102\050\114\051\104\052\116\053\120" +
    "\054\112\055\115\056\107\057\106\067\210\001\002\000" +
    "\120\004\uffab\010\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\025\uffab\026" +
    "\uffab\030\uffab\031\uffab\034\uffab\036\uffab\037\uffab\040\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\061\uffab\062\uffab\063\uffab\065\uffab\066\uffab\067\uffab\071" +
    "\uffab\001\002\000\036\004\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\025\uffc9\034\uffc9\036\uffc9\043" +
    "\uffc9\044\uffc9\062\uffc9\065\uffc9\001\002\000\040\010\103" +
    "\014\111\026\105\031\117\046\110\047\102\050\114\051" +
    "\104\052\116\053\120\054\112\055\115\056\107\057\106" +
    "\061\213\001\002\000\036\004\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\025\uffca\034\uffca\036\uffca" +
    "\043\uffca\044\uffca\062\uffca\065\uffca\001\002\000\004\061" +
    "\230\001\002\000\020\004\074\005\216\006\100\007\071" +
    "\027\075\047\070\064\076\001\002\000\006\062\uffc4\065" +
    "\uffc4\001\002\000\042\010\103\014\111\026\105\031\117" +
    "\046\110\047\102\050\114\051\104\052\116\053\120\054" +
    "\112\055\115\056\107\057\106\062\uffc3\065\uffc3\001\002" +
    "\000\006\062\221\065\222\001\002\000\020\004\074\005" +
    "\216\006\100\007\071\027\075\047\070\064\076\001\002" +
    "\000\004\061\uffc8\001\002\000\006\062\224\065\225\001" +
    "\002\000\020\004\074\005\216\006\100\007\071\027\075" +
    "\047\070\064\076\001\002\000\004\061\uffc7\001\002\000" +
    "\006\062\uffc6\065\uffc6\001\002\000\006\062\uffc5\065\uffc5" +
    "\001\002\000\036\004\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\025\uffd4\034\uffd4\036\uffd4\043\uffd4" +
    "\044\uffd4\062\uffd4\065\uffd4\001\002\000\042\004\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\025\ufffa" +
    "\034\ufffa\036\ufffa\043\ufffa\044\ufffa\062\ufffa\063\066\065" +
    "\ufffa\066\064\001\002\000\042\004\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\025\uffac\034\uffac\036" +
    "\uffac\043\uffac\044\uffac\062\uffac\063\uffac\065\uffac\066\uffac" +
    "\001\002\000\004\061\234\001\002\000\036\004\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7" +
    "\034\uffd7\036\uffd7\043\uffd7\044\uffd7\062\uffd7\065\uffd7\001" +
    "\002\000\040\010\103\014\111\026\105\031\117\037\236" +
    "\046\110\047\102\050\114\051\104\052\116\053\120\054" +
    "\112\055\115\056\107\057\106\001\002\000\030\004\056" +
    "\020\240\021\050\022\052\023\055\025\054\034\047\036" +
    "\062\043\051\044\061\062\057\001\002\000\030\004\056" +
    "\017\244\021\050\022\052\023\055\025\054\034\047\036" +
    "\062\043\051\044\061\062\243\001\002\000\004\061\241" +
    "\001\002\000\036\004\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\025\uffd3\034\uffd3\036\uffd3\043\uffd3" +
    "\044\uffd3\062\uffd3\065\uffd3\001\002\000\036\004\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc" +
    "\034\ufffc\036\ufffc\043\ufffc\044\ufffc\062\ufffc\065\ufffc\001" +
    "\002\000\004\004\232\001\002\000\016\004\074\006\100" +
    "\007\071\027\075\047\070\064\076\001\002\000\040\010" +
    "\103\014\111\026\105\031\117\037\246\046\110\047\102" +
    "\050\114\051\104\052\116\053\120\054\112\055\115\056" +
    "\107\057\106\001\002\000\026\004\056\021\050\022\052" +
    "\023\055\025\054\034\047\036\062\043\051\044\061\062" +
    "\057\001\002\000\030\004\056\016\250\021\050\022\052" +
    "\023\055\025\054\034\047\036\062\043\051\044\061\062" +
    "\243\001\002\000\026\004\056\021\050\022\052\023\055" +
    "\025\054\034\047\036\062\043\051\044\061\062\057\001" +
    "\002\000\030\004\056\020\252\021\050\022\052\023\055" +
    "\025\054\034\047\036\062\043\051\044\061\062\243\001" +
    "\002\000\004\061\253\001\002\000\036\004\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2\034" +
    "\uffd2\036\uffd2\043\uffd2\044\uffd2\062\uffd2\065\uffd2\001\002" +
    "\000\042\004\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\025\ufffb\034\ufffb\036\ufffb\043\ufffb\044\ufffb" +
    "\062\ufffb\063\066\065\ufffb\066\064\001\002\000\030\004" +
    "\056\020\260\021\050\022\052\023\055\025\054\034\047" +
    "\036\062\043\051\044\061\062\243\001\002\000\004\061" +
    "\257\001\002\000\036\004\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\025\uffce\034\uffce\036\uffce\043" +
    "\uffce\044\uffce\062\uffce\065\uffce\001\002\000\004\061\261" +
    "\001\002\000\036\004\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\025\uffcf\034\uffcf\036\uffcf\043\uffcf" +
    "\044\uffcf\062\uffcf\065\uffcf\001\002\000\004\061\ufffe\001" +
    "\002\000\004\045\264\001\002\000\016\004\074\006\100" +
    "\007\071\027\075\047\070\064\076\001\002\000\040\010" +
    "\103\014\111\026\105\031\117\040\266\046\110\047\102" +
    "\050\114\051\104\052\116\053\120\054\112\055\115\056" +
    "\107\057\106\001\002\000\016\004\074\006\100\007\071" +
    "\027\075\047\070\064\076\001\002\000\042\010\103\013" +
    "\270\014\111\015\271\026\105\031\117\046\110\047\102" +
    "\050\114\051\104\052\116\053\120\054\112\055\115\056" +
    "\107\057\106\001\002\000\016\004\074\006\100\007\071" +
    "\027\075\047\070\064\076\001\002\000\026\004\056\021" +
    "\050\022\052\023\055\025\054\034\047\036\062\043\051" +
    "\044\061\062\057\001\002\000\030\004\056\020\273\021" +
    "\050\022\052\023\055\025\054\034\047\036\062\043\051" +
    "\044\061\062\243\001\002\000\036\004\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\025\uffcd\034\uffcd" +
    "\036\uffcd\043\uffcd\044\uffcd\062\uffcd\065\uffcd\001\002\000" +
    "\040\010\103\014\111\015\275\026\105\031\117\046\110" +
    "\047\102\050\114\051\104\052\116\053\120\054\112\055" +
    "\115\056\107\057\106\001\002\000\026\004\056\021\050" +
    "\022\052\023\055\025\054\034\047\036\062\043\051\044" +
    "\061\062\057\001\002\000\030\004\056\020\277\021\050" +
    "\022\052\023\055\025\054\034\047\036\062\043\051\044" +
    "\061\062\243\001\002\000\004\061\300\001\002\000\036" +
    "\004\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\025\uffcc\034\uffcc\036\uffcc\043\uffcc\044\uffcc\062\uffcc" +
    "\065\uffcc\001\002\000\040\010\103\014\111\015\302\026" +
    "\105\031\117\046\110\047\102\050\114\051\104\052\116" +
    "\053\120\054\112\055\115\056\107\057\106\001\002\000" +
    "\030\004\056\020\304\021\050\022\052\023\055\025\054" +
    "\034\047\036\062\043\051\044\061\062\057\001\002\000" +
    "\030\004\056\020\306\021\050\022\052\023\055\025\054" +
    "\034\047\036\062\043\051\044\061\062\243\001\002\000" +
    "\004\061\305\001\002\000\036\004\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\034\uffd0\036" +
    "\uffd0\043\uffd0\044\uffd0\062\uffd0\065\uffd0\001\002\000\004" +
    "\061\307\001\002\000\036\004\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1\034\uffd1\036\uffd1" +
    "\043\uffd1\044\uffd1\062\uffd1\065\uffd1\001\002\000\036\004" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\025\uffcb\034\uffcb\036\uffcb\043\uffcb\044\uffcb\062\uffcb\065" +
    "\uffcb\001\002\000\004\004\232\001\002\000\034\004\056" +
    "\021\050\022\052\023\055\025\054\034\047\036\062\043" +
    "\051\044\061\062\057\063\066\065\314\066\064\001\002" +
    "\000\030\004\056\021\050\022\052\023\055\025\054\034" +
    "\047\036\062\043\051\044\061\062\243\065\316\001\002" +
    "\000\004\061\315\001\002\000\036\004\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\034\uffd6" +
    "\036\uffd6\043\uffd6\044\uffd6\062\uffd6\065\uffd6\001\002\000" +
    "\004\061\317\001\002\000\036\004\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5\034\uffd5\036" +
    "\uffd5\043\uffd5\044\uffd5\062\uffd5\065\uffd5\001\002\000\004" +
    "\064\331\001\002\000\004\010\323\001\002\000\012\012" +
    "\ufff5\032\ufff5\041\ufff5\042\ufff5\001\002\000\004\004\320" +
    "\001\002\000\014\010\325\012\uffea\032\uffea\041\uffea\042" +
    "\uffea\001\002\000\004\004\320\001\002\000\014\010\uffe9" +
    "\012\uffe9\032\uffe9\041\uffe9\042\uffe9\001\002\000\014\010" +
    "\uffe8\012\uffe8\032\uffe8\041\uffe8\042\uffe8\001\002\000\006" +
    "\024\353\060\352\001\002\000\006\004\332\065\334\001" +
    "\002\000\004\062\343\001\002\000\004\061\336\001\002" +
    "\000\006\024\uffde\060\uffde\001\002\000\006\061\341\065" +
    "\340\001\002\000\004\004\332\001\002\000\006\061\uffdc" +
    "\065\uffdc\001\002\000\006\024\uffdf\060\uffdf\001\002\000" +
    "\004\004\332\001\002\000\006\061\uffdd\065\uffdd\001\002" +
    "\000\004\004\351\001\002\000\006\060\346\062\345\001" +
    "\002\000\004\004\350\001\002\000\004\004\016\001\002" +
    "\000\006\061\uffdb\065\uffdb\001\002\000\006\060\uffda\062" +
    "\uffda\001\002\000\006\060\uffd9\062\uffd9\001\002\000\004" +
    "\004\016\001\002\000\012\012\013\032\012\041\014\042" +
    "\010\001\002\000\004\061\355\001\002\000\014\010\uffe7" +
    "\012\uffe7\032\uffe7\041\uffe7\042\uffe7\001\002\000\004\024" +
    "\357\001\002\000\012\012\013\032\012\041\014\042\010" +
    "\001\002\000\004\061\361\001\002\000\014\010\uffe6\012" +
    "\uffe6\032\uffe6\041\uffe6\042\uffe6\001\002\000\026\004\056" +
    "\021\050\022\052\023\055\025\054\034\047\036\062\043" +
    "\051\044\061\062\057\001\002\000\012\012\ufff9\032\ufff9" +
    "\041\ufff9\042\ufff9\001\002\000\030\004\056\020\365\021" +
    "\050\022\052\023\055\025\054\034\047\036\062\043\051" +
    "\044\061\062\243\001\002\000\004\061\uffff\001\002\000" +
    "\004\062\373\001\002\000\012\012\ufff7\032\ufff7\041\ufff7" +
    "\042\ufff7\001\002\000\002\001\002\000\014\004\366\012" +
    "\ufff4\032\ufff4\041\ufff4\042\ufff4\001\002\000\014\004\ufff3" +
    "\012\ufff3\032\ufff3\041\ufff3\042\ufff3\001\002\000\004\004" +
    "\u0107\001\002\000\010\045\377\060\376\062\375\001\002" +
    "\000\004\004\u0106\001\002\000\004\004\016\001\002\000" +
    "\016\004\074\006\100\007\071\027\075\047\070\064\076" +
    "\001\002\000\040\010\103\014\111\026\105\031\117\046" +
    "\110\047\102\050\114\051\104\052\116\053\120\054\112" +
    "\055\115\056\107\057\106\061\u0101\001\002\000\014\004" +
    "\ufff2\012\ufff2\032\ufff2\041\ufff2\042\ufff2\001\002\000\004" +
    "\045\u0103\001\002\000\016\004\074\006\100\007\071\027" +
    "\075\047\070\064\076\001\002\000\040\010\103\014\111" +
    "\026\105\031\117\046\110\047\102\050\114\051\104\052" +
    "\116\053\120\054\112\055\115\056\107\057\106\061\u0105" +
    "\001\002\000\014\004\ufff1\012\ufff1\032\ufff1\041\ufff1\042" +
    "\ufff1\001\002\000\010\045\ufff0\060\ufff0\062\ufff0\001\002" +
    "\000\010\045\uffef\060\uffef\062\uffef\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\006\044\014\046\010\001\001" +
    "\000\002\001\001\000\006\040\367\042\366\001\001\000" +
    "\004\044\362\001\001\000\006\032\320\033\321\001\001" +
    "\000\010\005\057\006\052\017\062\001\001\000\010\035" +
    "\016\036\020\045\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\023\001\001\000\004\027\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\033\031\032\001\001\000\004\027\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\045\045\017\001\001\000\002\001\001" +
    "\000\006\035\044\045\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\300\007\071\017\076\001\001\000\002\001\001\000" +
    "\006\005\241\017\062\001\001\000\010\005\057\006\254" +
    "\017\062\001\001\000\010\004\234\007\071\017\076\001" +
    "\001\000\004\015\232\001\001\000\004\017\230\001\001" +
    "\000\002\001\001\000\004\021\213\001\001\000\010\004" +
    "\211\007\071\017\076\001\001\000\002\001\001\000\010" +
    "\004\206\007\071\017\076\001\001\000\010\004\072\007" +
    "\071\017\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\205\007\071\017\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\140" +
    "\013\142\015\141\001\001\000\010\004\136\007\071\017" +
    "\076\001\001\000\010\004\100\007\071\017\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\135\007\071\017\076\001\001\000\010\004\134" +
    "\007\071\017\076\001\001\000\010\004\133\007\071\017" +
    "\076\001\001\000\010\004\132\007\071\017\076\001\001" +
    "\000\010\004\131\007\071\017\076\001\001\000\010\004" +
    "\130\007\071\017\076\001\001\000\010\004\127\007\071" +
    "\017\076\001\001\000\010\004\126\007\071\017\076\001" +
    "\001\000\010\004\125\007\071\017\076\001\001\000\002" +
    "\001\001\000\010\004\124\007\071\017\076\001\001\000" +
    "\010\004\123\007\071\017\076\001\001\000\010\004\122" +
    "\007\071\017\076\001\001\000\010\004\121\007\071\017" +
    "\076\001\001\000\010\004\120\007\071\017\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\156\007" +
    "\071\010\154\017\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\144\007\071\017" +
    "\076\001\001\000\004\016\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\150\007\071\017\076\001" +
    "\001\000\002\001\001\000\010\004\153\007\071\017\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\140\013\142\015\141\001\001\000\010\004\161\007" +
    "\071\017\076\001\001\000\004\014\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\170\007\071\017\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\173\007\071\017\076\001\001\000\002\001\001\000\010" +
    "\004\175\007\071\017\076\001\001\000\002\001\001\000" +
    "\012\004\156\007\071\010\203\017\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\156\007\071\010" +
    "\202\017\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\216\007\071\017" +
    "\076\020\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\222\001\001\000\012\004\216\007\071\017" +
    "\076\020\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\216\007\071\017\076\020\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\057" +
    "\006\236\017\062\001\001\000\006\005\241\017\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\253\001\001\000\010\004\244\007\071\017" +
    "\076\001\001\000\002\001\001\000\010\005\057\006\246" +
    "\017\062\001\001\000\006\005\241\017\062\001\001\000" +
    "\010\005\057\006\250\017\062\001\001\000\006\005\241" +
    "\017\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\241\017\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\264" +
    "\007\071\017\076\001\001\000\002\001\001\000\010\004" +
    "\266\007\071\017\076\001\001\000\002\001\001\000\010" +
    "\004\273\007\071\017\076\001\001\000\010\005\057\006" +
    "\271\017\062\001\001\000\006\005\241\017\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\057\006" +
    "\275\017\062\001\001\000\006\005\241\017\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\057\006\302\017\062\001\001\000\006\005\241" +
    "\017\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\311\001\001\000\010\005\057\006\312\017\062\001" +
    "\001\000\006\005\241\017\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\327\001\001\000\004\034\323\001\001\000\002" +
    "\001\001\000\004\032\326\001\001\000\002\001\001\000" +
    "\004\032\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\332\001\001\000\004\024" +
    "\343\001\001\000\004\026\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\355\001\001\000" +
    "\010\003\353\044\014\046\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\357\044" +
    "\014\046\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\057\006\363\017\062\001\001\000\002\001" +
    "\001\000\006\005\241\017\062\001\001\000\002\001\001" +
    "\000\004\041\373\001\001\000\002\001\001\000\004\043" +
    "\370\001\001\000\004\040\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u0101\001\001\000\010\004\377\007\071\017\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u0103\007\071\017\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PcatParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PcatParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PcatParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.REAL_LITERAL,
      sym.AND, sym.ARRAY, sym.BEGIN, sym.BY, sym.DIV, sym.DO, sym.ELSE, sym.ELSIF, sym.END,
      sym.EXIT, sym.FOR, sym.IF, sym.IS, sym.LOOP, sym.MOD, sym.NOT, sym.OF, sym.OR,
      sym.PROCEDURE, sym.PROGRAM, sym.READ, sym.RECORD, sym.RETURN, sym.THEN, sym.TO,
      sym.TYPE, sym.VAR, sym.WHILE, sym.WRITE, sym.ASGN, sym.PLUS, sym.MINUS, sym.TIMES, sym.SLASH,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI, sym.COMMA, sym.DOT,
      sym.LPAREN, sym.RPAREN, sym.LSQBRA, sym.RSQBRA, sym.LCUBRA, sym.RCUBRA
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "REAL_LITERAL",
      "AND", "ARRAY", "BEGIN", "BY", "DIV", "DO", "ELSE", "ELSIF", "END",
      "EXIT", "FOR", "IF", "IS", "LOOP", "MOD", "NOT", "OF", "OR",
      "PROCEDURE", "PROGRAM", "READ", "RECORD", "RETURN", "THEN", "TO",
      "TYPE", "VAR", "WHILE", "WRITE", "ASGN :=", "PLUS +", "MINUS -", "TIMES *", "SLASH /",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ =", "NEQ <>", "COLON :", "SEMI ;", "COMMA ,", "DOT .",
      "LPAREN (", "RPAREN )", "LSQBRA [", "RSQBRA ]", "LCUBRA "+'{', "RCUBRA "+'}'
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PcatParser$actions {
  private final PcatParser parser;

  /** Constructor */
  CUP$PcatParser$actions(PcatParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action_part00000000(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PcatParser$result;

      /* select the action based on the action number */
      switch (CUP$PcatParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		RESULT = start_val;
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PcatParser$parser.done_parsing();
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IS body SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 PCAT.setAST(new ProcDecl("main","NoType",nil,b)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declaration_lst BEGIN statement_lst END 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= BEGIN statement_lst END 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new Body(nil,sl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_lst ::= statement 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(s,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_lst",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_lst ::= statement_lst statement 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(sl,s); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_lst",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_lst ::= statement_lst COMMA lvalue 
            {
              List<Stmt> RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_lst",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_lst ::= COMMA lvalue 
            {
              List<Stmt> RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_lst",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_lst ::= declaration_lst declaration 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration_lst",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_lst ::= declaration 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration_lst",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= VAR var_decls 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= TYPE type_decls 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= PROCEDURE procedure_decls 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_decls ::= var_decl var_decls_lst 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decls",32, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_decls_lst ::= var_decls_lst var_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decls_lst",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_decl ::= ID var_decl1 ASGN expression SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_decl ::= ID var_decl1 COLON typename ASGN expression SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_decl1 ::= var_decl1 COMMA ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl1",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_decl1 ::= COMMA ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl1",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_decls ::= type_decl type_decls1 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls",28, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_decls1 ::= type_decls1 AND type_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls1",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_decls1 ::= AND type_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls1",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_decl ::= typename IS type SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decl",27, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_decls ::= procedure_decl procedure_decls1 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decls",25, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedure_decls1 ::= procedure_decls1 AND procedure_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decls1",26, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure_decls1 ::= AND procedure_decl 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decls1",26, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure_decl ::= ID formal_params IS body SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",24, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedure_decl ::= ID formal_params COLON typename IS body SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",24, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typename ::= ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("typename",35, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= ARRAY OF ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= RECORD component component_lst END 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // component_lst ::= component_lst component 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component_lst",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // component_lst ::= component 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component_lst",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // component ::= ID COLON typename SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component",21, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // formal_params ::= LPAREN fp_section formal_params1 RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",19, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // formal_params ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",19, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formal_params1 ::= formal_params1 SEMI fp_section 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params1",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formal_params1 ::= SEMI fp_section 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params1",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fp_section ::= ID fp_section1 COLON typename 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fp_section1 ::= fp_section1 COMMA ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section1",18, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fp_section1 ::= COMMA ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section1",18, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= lvalue ASGN expression SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= ID actual_params SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= READ LPAREN lvalue RPAREN SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= READ LPAREN lvalue statement_lst RPAREN SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= WRITE write_params SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= IF expression THEN END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= IF expression THEN statement_lst ELSIF expression THEN statement_lst ELSE statement_lst END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-11)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= WHILE expression DO statement_lst END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= WHILE expression DO END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= LOOP statement_lst END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= LOOP END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= FOR ID ASGN expression TO expression DO statement_lst END 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= FOR ID ASGN expression TO expression BY expression DO statement_lst END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-11)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= EXIT SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= RETURN expression SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ReturnValueSt(e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new ReturnSt(); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // write_params ::= LPAREN write_expr RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // write_params ::= LPAREN write_expr write_params1 RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // write_params1 ::= write_params1 COMMA write_expr 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params1",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // write_params1 ::= COMMA write_expr 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params1",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // write_expr ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // write_expr ::= expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= number 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= lvalue 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= MINUS expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= NOT expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression PLUS expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression MINUS expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression TIMES expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression SLASH expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression DIV expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression MOD expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression OR expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression AND expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression GT expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression LT expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression EQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression GEQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression LEQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression NEQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= ID actual_params 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= ID record_inits 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= ID array_inits 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lvalue ::= ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lvalue ::= lvalue LSQBRA expression RSQBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lvalue ::= lvalue DOT ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actual_params ::= LPAREN expression actual_params1 RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // actual_params ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // actual_params1 ::= actual_params1 COMMA expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params1",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // actual_params1 ::= COMMA expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params1",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // record_inits ::= LCUBRA ID ASGN expression record_inits1 RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // record_inits1 ::= record_inits1 SEMI ID ASGN expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits1",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // record_inits1 ::= SEMI ID ASGN expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits1",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // array_inits ::= LCUBRA RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // array_inits ::= LCUBRA array_init array_inits1 RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // array_inits1 ::= array_inits1 COMMA array_init 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits1",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // array_inits1 ::= COMMA array_init 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits1",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // array_init ::= expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // array_init ::= expression OF expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // number ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // number ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PcatParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
              return CUP$PcatParser$do_action_part00000000(
                               CUP$PcatParser$act_num,
                               CUP$PcatParser$parser,
                               CUP$PcatParser$stack,
                               CUP$PcatParser$top);
    }
}

}
