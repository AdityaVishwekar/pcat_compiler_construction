
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package edu.uta.pcat;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PcatParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PcatParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PcatParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PcatParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\006\000\002\003" +
    "\006\000\002\003\005\000\002\006\003\000\002\006\004" +
    "\000\002\046\003\000\002\046\004\000\002\044\004\000" +
    "\002\044\004\000\002\044\004\000\002\042\003\000\002" +
    "\042\004\000\002\043\004\000\002\043\003\000\002\041" +
    "\006\000\002\041\007\000\002\041\011\000\002\041\010" +
    "\000\002\037\004\000\002\037\003\000\002\040\005\000" +
    "\002\040\004\000\002\036\006\000\002\034\004\000\002" +
    "\034\003\000\002\035\005\000\002\035\004\000\002\033" +
    "\010\000\002\033\007\000\002\051\004\000\002\045\003" +
    "\000\002\031\005\000\002\031\005\000\002\031\006\000" +
    "\002\032\003\000\002\032\004\000\002\030\006\000\002" +
    "\026\005\000\002\026\006\000\002\026\004\000\002\027" +
    "\005\000\002\027\004\000\002\024\005\000\002\024\006" +
    "\000\002\025\005\000\002\025\004\000\002\005\006\000" +
    "\002\005\005\000\002\005\010\000\002\005\007\000\002" +
    "\005\005\000\002\005\010\000\002\005\013\000\002\005" +
    "\012\000\002\005\010\000\002\005\007\000\002\005\006" +
    "\000\002\005\005\000\002\005\015\000\002\005\014\000" +
    "\002\005\016\000\002\005\004\000\002\005\005\000\002" +
    "\005\004\000\002\020\005\000\002\020\004\000\002\047" +
    "\007\000\002\047\006\000\002\022\005\000\002\022\006" +
    "\000\002\022\004\000\002\023\005\000\002\023\004\000" +
    "\002\021\003\000\002\021\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\004" +
    "\004\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\017\003\000" +
    "\002\017\006\000\002\017\005\000\002\015\006\000\002" +
    "\015\005\000\002\015\004\000\002\016\005\000\002\016" +
    "\004\000\002\013\010\000\002\014\007\000\002\014\006" +
    "\000\002\011\005\000\002\011\004\000\002\055\004\000" +
    "\002\055\003\000\002\012\005\000\002\012\004\000\002" +
    "\010\004\000\002\010\003\000\002\056\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\004\033\005\001\002\000\004\002\u0122\001" +
    "\002\000\004\024\006\001\002\000\012\012\013\032\012" +
    "\041\015\042\011\001\002\000\004\061\u0121\001\002\000" +
    "\012\012\u011d\032\012\041\015\042\011\001\002\000\004" +
    "\004\u0106\001\002\000\004\004\340\001\002\000\024\004" +
    "\056\021\051\022\053\023\055\025\054\034\050\036\061" +
    "\043\052\044\060\001\002\000\012\012\ufffb\032\ufffb\041" +
    "\ufffb\042\ufffb\001\002\000\004\004\016\001\002\000\012" +
    "\024\uffe2\045\uffe2\061\uffe2\065\uffe2\001\002\000\014\010" +
    "\043\012\uffed\032\uffed\041\uffed\042\uffed\001\002\000\004" +
    "\024\022\001\002\000\012\012\ufff8\032\ufff8\041\ufff8\042" +
    "\ufff8\001\002\000\006\011\025\035\023\001\002\000\004" +
    "\004\031\001\002\000\004\061\030\001\002\000\004\030" +
    "\026\001\002\000\004\004\016\001\002\000\004\061\uffe1" +
    "\001\002\000\014\010\uffea\012\uffea\032\uffea\041\uffea\042" +
    "\uffea\001\002\000\004\060\040\001\002\000\006\004\031" +
    "\020\035\001\002\000\006\004\031\020\037\001\002\000" +
    "\006\004\uffde\020\uffde\001\002\000\004\061\uffe0\001\002" +
    "\000\006\004\uffdd\020\uffdd\001\002\000\004\061\uffdf\001" +
    "\002\000\004\004\016\001\002\000\004\061\042\001\002" +
    "\000\006\004\uffdc\020\uffdc\001\002\000\004\004\016\001" +
    "\002\000\014\010\045\012\uffee\032\uffee\041\uffee\042\uffee" +
    "\001\002\000\004\004\016\001\002\000\014\010\uffec\012" +
    "\uffec\032\uffec\041\uffec\042\uffec\001\002\000\014\010\uffeb" +
    "\012\uffeb\032\uffeb\041\uffeb\042\uffeb\001\002\000\004\064" +
    "\324\001\002\000\004\061\323\001\002\000\016\004\073" +
    "\006\075\007\076\027\074\047\077\064\100\001\002\000" +
    "\004\004\273\001\002\000\026\004\056\020\266\021\051" +
    "\022\053\023\055\025\054\034\050\036\061\043\052\044" +
    "\060\001\002\000\016\004\073\006\075\007\076\027\074" +
    "\047\077\064\100\001\002\000\012\045\uff9e\063\uff9e\064" +
    "\147\066\uff9e\001\002\000\032\004\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd\034\ufffd\036" +
    "\ufffd\043\ufffd\044\ufffd\001\002\000\004\064\221\001\002" +
    "\000\020\004\073\006\075\007\076\027\074\047\077\061" +
    "\215\064\100\001\002\000\010\045\067\063\070\066\066" +
    "\001\002\000\026\004\056\020\065\021\051\022\053\023" +
    "\055\025\054\034\050\036\061\043\052\044\060\001\002" +
    "\000\032\004\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\025\ufffc\034\ufffc\036\ufffc\043\ufffc\044\ufffc" +
    "\001\002\000\004\061\ufffe\001\002\000\016\004\073\006" +
    "\075\007\076\027\074\047\077\064\100\001\002\000\016" +
    "\004\073\006\075\007\076\027\074\047\077\064\100\001" +
    "\002\000\004\004\071\001\002\000\070\010\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\026\uff9c\030\uff9c\031\uff9c\037\uff9c\040" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\065\uff9c\066\uff9c\067\uff9c\071\uff9c\001\002" +
    "\000\066\010\uffb3\013\uffb3\014\uffb3\015\uffb3\026\uffb3\030" +
    "\uffb3\031\uffb3\037\uffb3\040\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\061\uffb3\062\uffb3\063\070\065\uffb3\066\066\067\uffb3" +
    "\071\uffb3\001\002\000\072\010\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\026\uff9e\030\uff9e\031\uff9e\037\uff9e\040\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\061\uff9e\062\uff9e\063\uff9e\064\147" +
    "\065\uff9e\066\uff9e\067\uff9e\070\143\071\uff9e\001\002\000" +
    "\016\004\073\006\075\007\076\027\074\047\077\064\100" +
    "\001\002\000\062\010\uffb5\013\uffb5\014\uffb5\015\uffb5\026" +
    "\uffb5\030\uffb5\031\uffb5\037\uffb5\040\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\061\uffb5\062\uffb5\065\uffb5\067\uffb5\071\uffb5" +
    "\001\002\000\062\010\uffb4\013\uffb4\014\uffb4\015\uffb4\026" +
    "\uffb4\030\uffb4\031\uffb4\037\uffb4\040\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\061\uffb4\062\uffb4\065\uffb4\067\uffb4\071\uffb4" +
    "\001\002\000\016\004\073\006\075\007\076\027\074\047" +
    "\077\064\100\001\002\000\016\004\073\006\075\007\076" +
    "\027\074\047\077\064\100\001\002\000\040\010\102\014" +
    "\113\026\105\031\117\046\111\047\103\050\114\051\104" +
    "\052\116\053\120\054\112\055\115\056\110\057\107\061" +
    "\106\001\002\000\016\004\073\006\075\007\076\027\074" +
    "\047\077\064\100\001\002\000\016\004\073\006\075\007" +
    "\076\027\074\047\077\064\100\001\002\000\016\004\073" +
    "\006\075\007\076\027\074\047\077\064\100\001\002\000" +
    "\016\004\073\006\075\007\076\027\074\047\077\064\100" +
    "\001\002\000\032\004\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\025\uffd2\034\uffd2\036\uffd2\043\uffd2" +
    "\044\uffd2\001\002\000\016\004\073\006\075\007\076\027" +
    "\074\047\077\064\100\001\002\000\016\004\073\006\075" +
    "\007\076\027\074\047\077\064\100\001\002\000\016\004" +
    "\073\006\075\007\076\027\074\047\077\064\100\001\002" +
    "\000\016\004\073\006\075\007\076\027\074\047\077\064" +
    "\100\001\002\000\016\004\073\006\075\007\076\027\074" +
    "\047\077\064\100\001\002\000\016\004\073\006\075\007" +
    "\076\027\074\047\077\064\100\001\002\000\016\004\073" +
    "\006\075\007\076\027\074\047\077\064\100\001\002\000" +
    "\016\004\073\006\075\007\076\027\074\047\077\064\100" +
    "\001\002\000\016\004\073\006\075\007\076\027\074\047" +
    "\077\064\100\001\002\000\016\004\073\006\075\007\076" +
    "\027\074\047\077\064\100\001\002\000\062\010\uffa3\013" +
    "\uffa3\014\113\015\uffa3\026\105\030\uffa3\031\uffa3\037\uffa3" +
    "\040\uffa3\046\111\047\103\050\114\051\104\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3" +
    "\065\uffa3\067\uffa3\071\uffa3\001\002\000\062\010\102\013" +
    "\uffa9\014\113\015\uffa9\026\105\030\uffa9\031\117\037\uffa9" +
    "\040\uffa9\046\111\047\103\050\114\051\104\052\116\053" +
    "\120\054\112\055\115\056\110\057\107\061\uffa9\062\uffa9" +
    "\065\uffa9\067\uffa9\071\uffa9\001\002\000\062\010\uffa6\013" +
    "\uffa6\014\113\015\uffa6\026\105\030\uffa6\031\uffa6\037\uffa6" +
    "\040\uffa6\046\111\047\103\050\114\051\104\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\061\uffa6\062\uffa6" +
    "\065\uffa6\067\uffa6\071\uffa6\001\002\000\062\010\uffa4\013" +
    "\uffa4\014\113\015\uffa4\026\105\030\uffa4\031\uffa4\037\uffa4" +
    "\040\uffa4\046\111\047\103\050\114\051\104\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\061\uffa4\062\uffa4" +
    "\065\uffa4\067\uffa4\071\uffa4\001\002\000\062\010\uffad\013" +
    "\uffad\014\uffad\015\uffad\026\uffad\030\uffad\031\uffad\037\uffad" +
    "\040\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\061\uffad\062\uffad" +
    "\065\uffad\067\uffad\071\uffad\001\002\000\062\010\uffab\013" +
    "\uffab\014\uffab\015\uffab\026\uffab\030\uffab\031\uffab\037\uffab" +
    "\040\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\061\uffab\062\uffab" +
    "\065\uffab\067\uffab\071\uffab\001\002\000\062\010\uffa7\013" +
    "\uffa7\014\113\015\uffa7\026\105\030\uffa7\031\uffa7\037\uffa7" +
    "\040\uffa7\046\111\047\103\050\114\051\104\052\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\061\uffa7\062\uffa7" +
    "\065\uffa7\067\uffa7\071\uffa7\001\002\000\062\010\uffaf\013" +
    "\uffaf\014\113\015\uffaf\026\105\030\uffaf\031\uffaf\037\uffaf" +
    "\040\uffaf\046\uffaf\047\uffaf\050\114\051\104\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\061\uffaf\062\uffaf" +
    "\065\uffaf\067\uffaf\071\uffaf\001\002\000\062\010\uffa5\013" +
    "\uffa5\014\113\015\uffa5\026\105\030\uffa5\031\uffa5\037\uffa5" +
    "\040\uffa5\046\111\047\103\050\114\051\104\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\061\uffa5\062\uffa5" +
    "\065\uffa5\067\uffa5\071\uffa5\001\002\000\062\010\uffa2\013" +
    "\uffa2\014\113\015\uffa2\026\105\030\uffa2\031\uffa2\037\uffa2" +
    "\040\uffa2\046\111\047\103\050\114\051\104\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\061\uffa2\062\uffa2" +
    "\065\uffa2\067\uffa2\071\uffa2\001\002\000\062\010\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\026\uffaa\030\uffaa\031\uffaa\037\uffaa" +
    "\040\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\061\uffaa\062\uffaa" +
    "\065\uffaa\067\uffaa\071\uffaa\001\002\000\062\010\uffac\013" +
    "\uffac\014\uffac\015\uffac\026\uffac\030\uffac\031\uffac\037\uffac" +
    "\040\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\061\uffac\062\uffac" +
    "\065\uffac\067\uffac\071\uffac\001\002\000\062\010\uffae\013" +
    "\uffae\014\113\015\uffae\026\105\030\uffae\031\uffae\037\uffae" +
    "\040\uffae\046\uffae\047\uffae\050\114\051\104\052\uffae\053" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\061\uffae\062\uffae" +
    "\065\uffae\067\uffae\071\uffae\001\002\000\062\010\102\013" +
    "\uffa8\014\113\015\uffa8\026\105\030\uffa8\031\uffa8\037\uffa8" +
    "\040\uffa8\046\111\047\103\050\114\051\104\052\116\053" +
    "\120\054\112\055\115\056\110\057\107\061\uffa8\062\uffa8" +
    "\065\uffa8\067\uffa8\071\uffa8\001\002\000\040\010\102\014" +
    "\113\026\105\031\117\046\111\047\103\050\114\051\104" +
    "\052\116\053\120\054\112\055\115\056\110\057\107\065" +
    "\140\001\002\000\062\010\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\026\uffb2\030\uffb2\031\uffb2\037\uffb2\040\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\061\uffb2\062\uffb2\065\uffb2\067\uffb2\071" +
    "\uffb2\001\002\000\062\010\102\013\uffb1\014\113\015\uffb1" +
    "\026\105\030\uffb1\031\117\037\uffb1\040\uffb1\046\111\047" +
    "\103\050\114\051\104\052\116\053\120\054\112\055\115" +
    "\056\110\057\107\061\uffb1\062\uffb1\065\uffb1\067\uffb1\071" +
    "\uffb1\001\002\000\062\010\uffb0\013\uffb0\014\113\015\uffb0" +
    "\026\105\030\uffb0\031\uffb0\037\uffb0\040\uffb0\046\111\047" +
    "\103\050\114\051\104\052\116\053\120\054\112\055\115" +
    "\056\110\057\107\061\uffb0\062\uffb0\065\uffb0\067\uffb0\071" +
    "\uffb0\001\002\000\020\004\166\006\075\007\076\027\074" +
    "\047\077\064\100\071\163\001\002\000\062\010\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\026\uff9f\030\uff9f\031\uff9f\037\uff9f" +
    "\040\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\061\uff9f\062\uff9f" +
    "\065\uff9f\067\uff9f\071\uff9f\001\002\000\062\010\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\026\uffa1\030\uffa1\031\uffa1\037\uffa1" +
    "\040\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1" +
    "\065\uffa1\067\uffa1\071\uffa1\001\002\000\062\010\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\026\uffa0\030\uffa0\031\uffa0\037\uffa0" +
    "\040\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\061\uffa0\062\uffa0" +
    "\065\uffa0\067\uffa0\071\uffa0\001\002\000\020\004\073\006" +
    "\075\007\076\027\074\047\077\064\100\065\151\001\002" +
    "\000\042\010\102\014\113\026\105\031\117\046\111\047" +
    "\103\050\114\051\104\052\116\053\120\054\112\055\115" +
    "\056\110\057\107\062\153\065\154\001\002\000\062\010" +
    "\uff99\013\uff99\014\uff99\015\uff99\026\uff99\030\uff99\031\uff99" +
    "\037\uff99\040\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\061\uff99" +
    "\062\uff99\065\uff99\067\uff99\071\uff99\001\002\000\006\062" +
    "\156\065\157\001\002\000\016\004\073\006\075\007\076" +
    "\027\074\047\077\064\100\001\002\000\062\010\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\026\uff9a\030\uff9a\031\uff9a\037\uff9a" +
    "\040\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\061\uff9a\062\uff9a" +
    "\065\uff9a\067\uff9a\071\uff9a\001\002\000\042\010\102\014" +
    "\113\026\105\031\117\046\111\047\103\050\114\051\104" +
    "\052\116\053\120\054\112\055\115\056\110\057\107\062" +
    "\uff97\065\uff97\001\002\000\016\004\073\006\075\007\076" +
    "\027\074\047\077\064\100\001\002\000\062\010\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\026\uff9b\030\uff9b\031\uff9b\037\uff9b" +
    "\040\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\061\uff9b\062\uff9b" +
    "\065\uff9b\067\uff9b\071\uff9b\001\002\000\042\010\102\014" +
    "\113\026\105\031\117\046\111\047\103\050\114\051\104" +
    "\052\116\053\120\054\112\055\115\056\110\057\107\062" +
    "\uff98\065\uff98\001\002\000\006\062\206\071\uff90\001\002" +
    "\000\016\004\073\006\075\007\076\027\074\047\077\064" +
    "\100\001\002\000\062\010\uff92\013\uff92\014\uff92\015\uff92" +
    "\026\uff92\030\uff92\031\uff92\037\uff92\040\uff92\046\uff92\047" +
    "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\056\uff92\057\uff92\061\uff92\062\uff92\065\uff92\067\uff92\071" +
    "\uff92\001\002\000\004\071\204\001\002\000\044\010\102" +
    "\014\113\026\105\030\203\031\117\046\111\047\103\050" +
    "\114\051\104\052\116\053\120\054\112\055\115\056\110" +
    "\057\107\062\uff8c\071\uff8c\001\002\000\056\010\uff9e\014" +
    "\uff9e\026\uff9e\030\uff9e\031\uff9e\045\167\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\062\uff9e\063\uff9e\064\147\066\uff9e\070\143" +
    "\071\uff9e\001\002\000\016\004\073\006\075\007\076\027" +
    "\074\047\077\064\100\001\002\000\040\010\102\014\113" +
    "\026\105\031\117\046\111\047\103\050\114\051\104\052" +
    "\116\053\120\054\112\055\115\056\110\057\107\061\171" +
    "\001\002\000\004\004\200\001\002\000\006\061\174\071" +
    "\173\001\002\000\062\010\uff96\013\uff96\014\uff96\015\uff96" +
    "\026\uff96\030\uff96\031\uff96\037\uff96\040\uff96\046\uff96\047" +
    "\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96" +
    "\056\uff96\057\uff96\061\uff96\062\uff96\065\uff96\067\uff96\071" +
    "\uff96\001\002\000\004\004\175\001\002\000\004\045\176" +
    "\001\002\000\016\004\073\006\075\007\076\027\074\047" +
    "\077\064\100\001\002\000\042\010\102\014\113\026\105" +
    "\031\117\046\111\047\103\050\114\051\104\052\116\053" +
    "\120\054\112\055\115\056\110\057\107\061\uff95\071\uff95" +
    "\001\002\000\004\045\201\001\002\000\016\004\073\006" +
    "\075\007\076\027\074\047\077\064\100\001\002\000\042" +
    "\010\102\014\113\026\105\031\117\046\111\047\103\050" +
    "\114\051\104\052\116\053\120\054\112\055\115\056\110" +
    "\057\107\061\uff94\071\uff94\001\002\000\016\004\uff8b\006" +
    "\uff8b\007\uff8b\027\uff8b\047\uff8b\064\uff8b\001\002\000\062" +
    "\010\uff93\013\uff93\014\uff93\015\uff93\026\uff93\030\uff93\031" +
    "\uff93\037\uff93\040\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93\061" +
    "\uff93\062\uff93\065\uff93\067\uff93\071\uff93\001\002\000\042" +
    "\010\102\014\113\026\105\031\117\046\111\047\103\050" +
    "\114\051\104\052\116\053\120\054\112\055\115\056\110" +
    "\057\107\062\uff8d\071\uff8d\001\002\000\016\004\073\006" +
    "\075\007\076\027\074\047\077\064\100\001\002\000\006" +
    "\062\210\071\uff91\001\002\000\016\004\073\006\075\007" +
    "\076\027\074\047\077\064\100\001\002\000\006\062\uff8f" +
    "\071\uff8f\001\002\000\006\062\uff8e\071\uff8e\001\002\000" +
    "\040\010\102\014\113\026\105\031\117\046\111\047\103" +
    "\050\114\051\104\052\116\053\120\054\112\055\115\056" +
    "\110\057\107\067\214\001\002\000\070\010\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\026\uff9d\030\uff9d\031\uff9d\037\uff9d\040" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\065\uff9d\066\uff9d\067\uff9d\071\uff9d\001\002" +
    "\000\032\004\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\025\uffc1\034\uffc1\036\uffc1\043\uffc1\044\uffc1" +
    "\001\002\000\040\010\102\014\113\026\105\031\117\046" +
    "\111\047\103\050\114\051\104\052\116\053\120\054\112" +
    "\055\115\056\110\057\107\061\217\001\002\000\032\004" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\025\uffc2\034\uffc2\036\uffc2\043\uffc2\044\uffc2\001\002\000" +
    "\004\061\235\001\002\000\022\004\073\005\222\006\075" +
    "\007\076\027\074\047\077\064\100\065\224\001\002\000" +
    "\006\062\uffb7\065\uffb7\001\002\000\042\010\102\014\113" +
    "\026\105\031\117\046\111\047\103\050\114\051\104\052" +
    "\116\053\120\054\112\055\115\056\110\057\107\062\uffb6" +
    "\065\uffb6\001\002\000\004\061\uffba\001\002\000\006\062" +
    "\226\065\227\001\002\000\020\004\073\005\222\006\075" +
    "\007\076\027\074\047\077\064\100\001\002\000\004\061" +
    "\uffbc\001\002\000\006\062\231\065\232\001\002\000\020" +
    "\004\073\005\222\006\075\007\076\027\074\047\077\064" +
    "\100\001\002\000\004\061\uffbb\001\002\000\006\062\uffb9" +
    "\065\uffb9\001\002\000\006\062\uffb8\065\uffb8\001\002\000" +
    "\032\004\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\025\uffce\034\uffce\036\uffce\043\uffce\044\uffce\001" +
    "\002\000\004\061\237\001\002\000\032\004\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1\034" +
    "\uffd1\036\uffd1\043\uffd1\044\uffd1\001\002\000\040\010\102" +
    "\014\113\026\105\031\117\037\241\046\111\047\103\050" +
    "\114\051\104\052\116\053\120\054\112\055\115\056\110" +
    "\057\107\001\002\000\024\004\056\021\051\022\053\023" +
    "\055\025\054\034\050\036\061\043\052\044\060\001\002" +
    "\000\032\004\056\016\243\017\245\020\246\021\051\022" +
    "\053\023\055\025\054\034\050\036\061\043\052\044\060" +
    "\001\002\000\024\004\056\021\051\022\053\023\055\025" +
    "\054\034\050\036\061\043\052\044\060\001\002\000\006" +
    "\016\253\017\254\001\002\000\016\004\073\006\075\007" +
    "\076\027\074\047\077\064\100\001\002\000\004\061\247" +
    "\001\002\000\032\004\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\025\uffcd\034\uffcd\036\uffcd\043\uffcd" +
    "\044\uffcd\001\002\000\040\010\102\014\113\026\105\031" +
    "\117\037\251\046\111\047\103\050\114\051\104\052\116" +
    "\053\120\054\112\055\115\056\110\057\107\001\002\000" +
    "\024\004\056\021\051\022\053\023\055\025\054\034\050" +
    "\036\061\043\052\044\060\001\002\000\030\004\056\016" +
    "\uffbd\017\uffbd\021\051\022\053\023\055\025\054\034\050" +
    "\036\061\043\052\044\060\001\002\000\024\004\056\021" +
    "\051\022\053\023\055\025\054\034\050\036\061\043\052" +
    "\044\060\001\002\000\016\004\073\006\075\007\076\027" +
    "\074\047\077\064\100\001\002\000\040\010\102\014\113" +
    "\026\105\031\117\037\256\046\111\047\103\050\114\051" +
    "\104\052\116\053\120\054\112\055\115\056\110\057\107" +
    "\001\002\000\024\004\056\021\051\022\053\023\055\025" +
    "\054\034\050\036\061\043\052\044\060\001\002\000\030" +
    "\004\056\016\uffbe\017\uffbe\021\051\022\053\023\055\025" +
    "\054\034\050\036\061\043\052\044\060\001\002\000\026" +
    "\004\056\020\261\021\051\022\053\023\055\025\054\034" +
    "\050\036\061\043\052\044\060\001\002\000\004\061\262" +
    "\001\002\000\032\004\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\025\uffcc\034\uffcc\036\uffcc\043\uffcc" +
    "\044\uffcc\001\002\000\026\004\056\020\264\021\051\022" +
    "\053\023\055\025\054\034\050\036\061\043\052\044\060" +
    "\001\002\000\004\061\265\001\002\000\032\004\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb" +
    "\034\uffcb\036\uffcb\043\uffcb\044\uffcb\001\002\000\004\061" +
    "\272\001\002\000\026\004\056\020\270\021\051\022\053" +
    "\023\055\025\054\034\050\036\061\043\052\044\060\001" +
    "\002\000\004\061\271\001\002\000\032\004\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8\034" +
    "\uffc8\036\uffc8\043\uffc8\044\uffc8\001\002\000\032\004\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\025" +
    "\uffc7\034\uffc7\036\uffc7\043\uffc7\044\uffc7\001\002\000\004" +
    "\045\274\001\002\000\016\004\073\006\075\007\076\027" +
    "\074\047\077\064\100\001\002\000\040\010\102\014\113" +
    "\026\105\031\117\040\276\046\111\047\103\050\114\051" +
    "\104\052\116\053\120\054\112\055\115\056\110\057\107" +
    "\001\002\000\016\004\073\006\075\007\076\027\074\047" +
    "\077\064\100\001\002\000\042\010\102\013\300\014\113" +
    "\015\301\026\105\031\117\046\111\047\103\050\114\051" +
    "\104\052\116\053\120\054\112\055\115\056\110\057\107" +
    "\001\002\000\016\004\073\006\075\007\076\027\074\047" +
    "\077\064\100\001\002\000\024\004\056\021\051\022\053" +
    "\023\055\025\054\034\050\036\061\043\052\044\060\001" +
    "\002\000\026\004\056\020\303\021\051\022\053\023\055" +
    "\025\054\034\050\036\061\043\052\044\060\001\002\000" +
    "\004\061\304\001\002\000\032\004\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5\034\uffc5\036" +
    "\uffc5\043\uffc5\044\uffc5\001\002\000\040\010\102\014\113" +
    "\015\306\026\105\031\117\046\111\047\103\050\114\051" +
    "\104\052\116\053\120\054\112\055\115\056\110\057\107" +
    "\001\002\000\026\004\056\020\307\021\051\022\053\023" +
    "\055\025\054\034\050\036\061\043\052\044\060\001\002" +
    "\000\004\061\313\001\002\000\026\004\056\020\311\021" +
    "\051\022\053\023\055\025\054\034\050\036\061\043\052" +
    "\044\060\001\002\000\004\061\312\001\002\000\032\004" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\025\uffc4\034\uffc4\036\uffc4\043\uffc4\044\uffc4\001\002\000" +
    "\032\004\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\025\uffc6\034\uffc6\036\uffc6\043\uffc6\044\uffc6\001" +
    "\002\000\040\010\102\014\113\015\315\026\105\031\117" +
    "\046\111\047\103\050\114\051\104\052\116\053\120\054" +
    "\112\055\115\056\110\057\107\001\002\000\026\004\056" +
    "\020\316\021\051\022\053\023\055\025\054\034\050\036" +
    "\061\043\052\044\060\001\002\000\004\061\322\001\002" +
    "\000\026\004\056\020\320\021\051\022\053\023\055\025" +
    "\054\034\050\036\061\043\052\044\060\001\002\000\004" +
    "\061\321\001\002\000\032\004\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\025\uffca\034\uffca\036\uffca" +
    "\043\uffca\044\uffca\001\002\000\032\004\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9\034\uffc9" +
    "\036\uffc9\043\uffc9\044\uffc9\001\002\000\032\004\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3" +
    "\034\uffc3\036\uffc3\043\uffc3\044\uffc3\001\002\000\004\004" +
    "\325\001\002\000\012\062\uff9e\063\uff9e\065\uff9e\066\uff9e" +
    "\001\002\000\012\062\327\063\070\065\330\066\066\001" +
    "\002\000\004\004\325\001\002\000\004\061\336\001\002" +
    "\000\006\062\332\065\333\001\002\000\004\004\325\001" +
    "\002\000\004\061\334\001\002\000\032\004\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\034" +
    "\uffd0\036\uffd0\043\uffd0\044\uffd0\001\002\000\012\062\uffc0" +
    "\063\070\065\uffc0\066\066\001\002\000\032\004\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf" +
    "\034\uffcf\036\uffcf\043\uffcf\044\uffcf\001\002\000\012\062" +
    "\uffbf\063\070\065\uffbf\066\066\001\002\000\004\064\351" +
    "\001\002\000\014\010\344\012\uffe8\032\uffe8\041\uffe8\042" +
    "\uffe8\001\002\000\012\012\ufff7\032\ufff7\041\ufff7\042\ufff7" +
    "\001\002\000\014\010\346\012\uffe9\032\uffe9\041\uffe9\042" +
    "\uffe9\001\002\000\004\004\340\001\002\000\014\010\uffe6" +
    "\012\uffe6\032\uffe6\041\uffe6\042\uffe6\001\002\000\004\004" +
    "\340\001\002\000\014\010\uffe7\012\uffe7\032\uffe7\041\uffe7" +
    "\042\uffe7\001\002\000\006\024\377\060\376\001\002\000" +
    "\006\004\352\065\353\001\002\000\006\060\366\062\364" +
    "\001\002\000\006\024\uffd9\060\uffd9\001\002\000\006\061" +
    "\356\065\355\001\002\000\006\024\uffdb\060\uffdb\001\002" +
    "\000\004\004\352\001\002\000\006\061\361\065\360\001" +
    "\002\000\006\024\uffda\060\uffda\001\002\000\004\004\352" +
    "\001\002\000\006\061\uffd8\065\uffd8\001\002\000\006\061" +
    "\uffd7\065\uffd7\001\002\000\004\004\374\001\002\000\006" +
    "\060\371\062\370\001\002\000\004\004\016\001\002\000" +
    "\006\061\uffd6\065\uffd6\001\002\000\004\004\373\001\002" +
    "\000\004\004\016\001\002\000\006\061\uffd5\065\uffd5\001" +
    "\002\000\010\045\uffd4\060\uffd4\062\uffd4\001\002\000\010" +
    "\045\uffd3\060\uffd3\062\uffd3\001\002\000\004\024\u0103\001" +
    "\002\000\004\004\016\001\002\000\012\012\013\032\012" +
    "\041\015\042\011\001\002\000\004\061\u0101\001\002\000" +
    "\014\010\uffe4\012\uffe4\032\uffe4\041\uffe4\042\uffe4\001\002" +
    "\000\004\024\uffe3\001\002\000\012\012\013\032\012\041" +
    "\015\042\011\001\002\000\004\061\u0105\001\002\000\014" +
    "\010\uffe5\012\uffe5\032\uffe5\041\uffe5\042\uffe5\001\002\000" +
    "\010\045\u010e\060\u010d\062\364\001\002\000\012\012\ufff9" +
    "\032\ufff9\041\ufff9\042\ufff9\001\002\000\014\004\u0106\012" +
    "\ufff6\032\ufff6\041\ufff6\042\ufff6\001\002\000\014\004\ufff3" +
    "\012\ufff3\032\ufff3\041\ufff3\042\ufff3\001\002\000\014\004" +
    "\u0106\012\ufff5\032\ufff5\041\ufff5\042\ufff5\001\002\000\014" +
    "\004\ufff4\012\ufff4\032\ufff4\041\ufff4\042\ufff4\001\002\000" +
    "\010\045\u0116\060\u0115\062\370\001\002\000\004\004\016" +
    "\001\002\000\016\004\073\006\075\007\076\027\074\047" +
    "\077\064\100\001\002\000\040\010\102\014\113\026\105" +
    "\031\117\046\111\047\103\050\114\051\104\052\116\053" +
    "\120\054\112\055\115\056\110\057\107\061\u0110\001\002" +
    "\000\014\004\ufff2\012\ufff2\032\ufff2\041\ufff2\042\ufff2\001" +
    "\002\000\004\045\u0112\001\002\000\016\004\073\006\075" +
    "\007\076\027\074\047\077\064\100\001\002\000\040\010" +
    "\102\014\113\026\105\031\117\046\111\047\103\050\114" +
    "\051\104\052\116\053\120\054\112\055\115\056\110\057" +
    "\107\061\u0114\001\002\000\014\004\uffef\012\uffef\032\uffef" +
    "\041\uffef\042\uffef\001\002\000\004\004\016\001\002\000" +
    "\016\004\073\006\075\007\076\027\074\047\077\064\100" +
    "\001\002\000\040\010\102\014\113\026\105\031\117\046" +
    "\111\047\103\050\114\051\104\052\116\053\120\054\112" +
    "\055\115\056\110\057\107\061\u0118\001\002\000\014\004" +
    "\ufff1\012\ufff1\032\ufff1\041\ufff1\042\ufff1\001\002\000\004" +
    "\045\u011a\001\002\000\016\004\073\006\075\007\076\027" +
    "\074\047\077\064\100\001\002\000\040\010\102\014\113" +
    "\026\105\031\117\046\111\047\103\050\114\051\104\052" +
    "\116\053\120\054\112\055\115\056\110\057\107\061\u011c" +
    "\001\002\000\014\004\ufff0\012\ufff0\032\ufff0\041\ufff0\042" +
    "\ufff0\001\002\000\024\004\056\021\051\022\053\023\055" +
    "\025\054\034\050\036\061\043\052\044\060\001\002\000" +
    "\012\012\ufffa\032\ufffa\041\ufffa\042\ufffa\001\002\000\026" +
    "\004\056\020\u0120\021\051\022\053\023\055\025\054\034" +
    "\050\036\061\043\052\044\060\001\002\000\004\061\uffff" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\006\044\013\046\007\001\001" +
    "\000\002\001\001\000\004\044\u011d\001\001\000\006\041" +
    "\u0107\042\u0106\001\001\000\006\033\340\034\341\001\001" +
    "\000\010\005\056\006\062\017\061\001\001\000\002\001" +
    "\001\000\010\036\016\037\020\045\017\001\001\000\002" +
    "\001\001\000\004\040\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\023\001\001\000\004\030\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\033\032\032\001\001\000\004\030" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\046\045\017" +
    "\001\001\000\002\001\001\000\006\036\045\045\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\313\017\071\001\001\000" +
    "\002\001\001\000\010\005\056\006\266\017\061\001\001" +
    "\000\006\004\237\017\071\001\001\000\004\015\235\001" +
    "\001\000\002\001\001\000\004\022\217\001\001\000\006" +
    "\004\215\017\071\001\001\000\002\001\001\000\006\005" +
    "\063\017\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\212\017\071\001\001\000\006\004\100\017" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\143\013\145\015\144\001\001\000" +
    "\006\004\141\017\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\140\017\071\001\001\000\006\004" +
    "\136\017\071\001\001\000\002\001\001\000\006\004\135" +
    "\017\071\001\001\000\006\004\134\017\071\001\001\000" +
    "\006\004\133\017\071\001\001\000\006\004\132\017\071" +
    "\001\001\000\002\001\001\000\006\004\131\017\071\001" +
    "\001\000\006\004\130\017\071\001\001\000\006\004\127" +
    "\017\071\001\001\000\006\004\126\017\071\001\001\000" +
    "\006\004\125\017\071\001\001\000\006\004\124\017\071" +
    "\001\001\000\006\004\123\017\071\001\001\000\006\004" +
    "\122\017\071\001\001\000\006\004\121\017\071\001\001" +
    "\000\006\004\120\017\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\164\010\160\017\071\055\163\056" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\147\017\071\001\001\000\004\016" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\154\017\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\157\017\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\206\001\001\000\006\004" +
    "\204\017\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\143\013\145\015\144\001" +
    "\001\000\006\004\167\017\071\001\001\000\004\014\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\176" +
    "\017\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\201\017\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\164\010\211\017\071\056\161\001\001\000\002\001\001" +
    "\000\012\004\164\010\210\017\071\056\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\222\017\071\021\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\227\001\001\000\010\004\222\017\071" +
    "\021\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\222\017\071\021\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\056\006\241\017\061\001\001\000\010\005\063\017" +
    "\061\047\243\001\001\000\010\005\056\006\262\017\061" +
    "\001\001\000\002\001\001\000\006\004\247\017\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\056\006\251\017\061\001\001\000\006\005" +
    "\063\017\061\001\001\000\010\005\056\006\257\017\061" +
    "\001\001\000\006\004\254\017\071\001\001\000\002\001" +
    "\001\000\010\005\056\006\256\017\061\001\001\000\006" +
    "\005\063\017\061\001\001\000\006\005\063\017\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\063" +
    "\017\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\063\017\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\274\017\071\001\001\000\002\001\001" +
    "\000\006\004\276\017\071\001\001\000\002\001\001\000" +
    "\006\004\304\017\071\001\001\000\010\005\056\006\301" +
    "\017\061\001\001\000\006\005\063\017\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\056\006\307\017\061\001\001\000\002\001\001\000" +
    "\006\005\063\017\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\056\006\316\017\061\001\001\000\002\001\001\000\006" +
    "\005\063\017\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\325" +
    "\001\001\000\002\001\001\000\004\020\330\001\001\000" +
    "\004\017\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\347\001\001\000\004\035\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\344\001\001" +
    "\000\002\001\001\000\004\033\346\001\001\000\002\001" +
    "\001\000\004\051\374\001\001\000\004\024\353\001\001" +
    "\000\004\025\364\001\001\000\002\001\001\000\004\027" +
    "\356\001\001\000\002\001\001\000\004\024\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u0101\001\001\000\010\003\377\044\013" +
    "\046\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\u0103\044\013\046\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u010b\001" +
    "\001\000\002\001\001\000\006\041\u0108\043\u0109\001\001" +
    "\000\002\001\001\000\004\041\u010a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u0110\001\001\000\006" +
    "\004\u010e\017\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\u0112\017\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\u0118\001" +
    "\001\000\006\004\u0116\017\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\u011a\017" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\056\006\u011e\017\061\001\001\000\002\001\001\000" +
    "\006\005\063\017\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PcatParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PcatParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PcatParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.REAL_LITERAL,
      sym.AND, sym.ARRAY, sym.BEGIN, sym.BY, sym.DIV, sym.DO, sym.ELSE, sym.ELSIF, sym.END,
      sym.EXIT, sym.FOR, sym.IF, sym.IS, sym.LOOP, sym.MOD, sym.NOT, sym.OF, sym.OR,
      sym.PROCEDURE, sym.PROGRAM, sym.READ, sym.RECORD, sym.RETURN, sym.THEN, sym.TO,
      sym.TYPE, sym.VAR, sym.WHILE, sym.WRITE, sym.ASGN, sym.PLUS, sym.MINUS, sym.TIMES, sym.SLASH,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI, sym.COMMA, sym.DOT,
      sym.LPAREN, sym.RPAREN, sym.LSQBRA, sym.RSQBRA, sym.LCUBRA, sym.RCUBRA
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "REAL_LITERAL",
      "AND", "ARRAY", "BEGIN", "BY", "DIV", "DO", "ELSE", "ELSIF", "END",
      "EXIT", "FOR", "IF", "IS", "LOOP", "MOD", "NOT", "OF", "OR",
      "PROCEDURE", "PROGRAM", "READ", "RECORD", "RETURN", "THEN", "TO",
      "TYPE", "VAR", "WHILE", "WRITE", "ASGN :=", "PLUS +", "MINUS -", "TIMES *", "SLASH /",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ =", "NEQ <>", "COLON :", "SEMI ;", "COMMA ,", "DOT .",
      "LPAREN (", "RPAREN )", "LSQBRA [", "RSQBRA ]", "LCUBRA "+'{', "RCUBRA "+'}'
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PcatParser$actions {
  private final PcatParser parser;

  /** Constructor */
  CUP$PcatParser$actions(PcatParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action_part00000000(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PcatParser$result;

      /* select the action based on the action number */
      switch (CUP$PcatParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		RESULT = start_val;
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PcatParser$parser.done_parsing();
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IS body SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 PCAT.setAST(new ProcDecl("main","NoType",nil,b)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declaration_lst BEGIN statementRec END 
            {
              Body RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		List<Declaration> dl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new Body(dl,sl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= BEGIN statementRec END 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new Body(nil,sl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statementRec ::= statement 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(s,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statementRec",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statementRec ::= statementRec statement 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(sl,s); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statementRec",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_lst ::= declaration 
            {
              List<Declaration> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(d,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration_lst",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_lst ::= declaration_lst declaration 
            {
              List<Declaration> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Declaration> dl = (List<Declaration>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(dl,d); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration_lst",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= VAR var_decls 
            {
              Declaration RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<VarDecl> vd = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new VarDecls(vd); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= TYPE type_decls 
            {
              Declaration RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<TypeDecl> td = (List<TypeDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new TypeDecls(td); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= PROCEDURE procedure_decls 
            {
              Declaration RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<ProcDecl> pd = (List<ProcDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new ProcDecls(pd); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decls ::= var_decl 
            {
              List<VarDecl> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(v,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decls",32, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_decls ::= var_decl var_declsRec 
            {
              List<VarDecl> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int vdrleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vdrright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<VarDecl> vdr = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(v,vdr); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decls",32, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_declsRec ::= var_declsRec var_decl 
            {
              List<VarDecl> RESULT =null;
		int vdrleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int vdrright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<VarDecl> vdr = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(vdr,v); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_declsRec",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declsRec ::= var_decl 
            {
              List<VarDecl> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(nil,v); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_declsRec",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_decl ::= ID ASGN expression SEMI 
            {
              VarDecl RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new VarDecl(nil,null,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_decl ::= ID fp_sectionRec ASGN expression SEMI 
            {
              VarDecl RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		List<String> fl = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new VarDecl(fl,null,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_decl ::= ID fp_sectionRec COLON typename ASGN expression SEMI 
            {
              VarDecl RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).right;
		List<String> fl = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new VarDecl(fl,tn,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_decl ::= ID COLON typename ASGN expression SEMI 
            {
              VarDecl RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new VarDecl(nil,tn,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_decls ::= type_decl type_declsRec 
            {
              List<TypeDecl> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		TypeDecl t = (TypeDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<TypeDecl> tl = (List<TypeDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(t,tl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_decls ::= type_decl 
            {
              List<TypeDecl> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		TypeDecl t = (TypeDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(t,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_declsRec ::= type_declsRec AND type_decl 
            {
              List<TypeDecl> RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<TypeDecl> tl = (List<TypeDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		TypeDecl t = (TypeDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(tl,t); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_declsRec",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_declsRec ::= AND type_decl 
            {
              List<TypeDecl> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		TypeDecl t = (TypeDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(nil,t); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_declsRec",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_decl ::= typename IS type SEMI 
            {
              TypeDecl RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new TypeDecl(tn,t); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decl",28, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedure_decls ::= procedure_decl procedure_declsRec 
            {
              List<ProcDecl> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		ProcDecl p = (ProcDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<ProcDecl> pl = (List<ProcDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(p,pl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decls",26, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure_decls ::= procedure_decl 
            {
              List<ProcDecl> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		ProcDecl p = (ProcDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(p,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decls",26, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure_declsRec ::= procedure_declsRec AND procedure_decl 
            {
              List<ProcDecl> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<ProcDecl> pl = (List<ProcDecl>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		ProcDecl p = (ProcDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(pl,p); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_declsRec",27, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedure_declsRec ::= AND procedure_decl 
            {
              List<ProcDecl> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		ProcDecl p = (ProcDecl)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(nil,p); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_declsRec",27, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedure_decl ::= ID formal_params procedure_decl_type IS body SEMI 
            {
              ProcDecl RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int pdtleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int pdtright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		List<Tuple2<List<String>,String>> pdt = (List<Tuple2<List<String>,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ProcDecl(nm,fp,pdt,b); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",25, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procedure_decl ::= ID formal_params IS body SEMI 
            {
              ProcDecl RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ProcDecl(nm,fp,nil,b); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",25, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procedure_decl_type ::= COLON typename 
            {
              List<Tuple2<List<String>,String>> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(nil,t); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl_type",39, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typename ::= ID 
            {
              String RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new String(nm); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("typename",35, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= ARRAY OF typename 
            {
              Type RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new ArrayType(tn); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= RECORD component END 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<String,String>> c = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new RecordType(c); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= RECORD component componentRec END 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Tuple2<String,String>> c = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<String,String>> cl = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new RecordType(cl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // componentRec ::= component 
            {
              List<Tuple2<String,String>> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<String,String>> c = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(c,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("componentRec",24, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // componentRec ::= componentRec component 
            {
              List<Tuple2<String,String>> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<String,String>> cl = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<String,String>> c = (List<Tuple2<String,String>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(cl,c); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("componentRec",24, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // component ::= ID COLON typename SEMI 
            {
              List<Tuple2<String,String>> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = append(add(nm,nil),tn); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component",22, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // formal_params ::= LPAREN fp_section RPAREN 
            {
              String RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<String> fs = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // formal_params ::= LPAREN fp_section formal_paramsRec RPAREN 
            {
              String RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formal_params ::= LPAREN RPAREN 
            {
              String RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // formal_paramsRec ::= formal_paramsRec SEMI fp_section 
            {
              List<String> RESULT =null;
		int fplleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<String> fpl = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<String> fs = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_paramsRec",21, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // formal_paramsRec ::= SEMI fp_section 
            {
              List<String> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<String> fs = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_paramsRec",21, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fp_section ::= ID COLON typename 
            {
              List<String> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(add(nm,nil),tn); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section",18, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fp_section ::= ID fp_sectionRec COLON typename 
            {
              List<String> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int fslleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int fslright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<String> fsl = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String tn = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(add(nm,fsl),tn); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section",18, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fp_sectionRec ::= fp_sectionRec COMMA ID 
            {
              List<String> RESULT =null;
		int fslleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int fslright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<String> fsl = (List<String>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(fsl,nm); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_sectionRec",19, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fp_sectionRec ::= COMMA ID 
            {
              List<String> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(nil,nm); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_sectionRec",19, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= lvalue ASGN expression SEMI 
            {
              Stmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		Lvalue l = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new AssignSt(l,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= ID actual_params SEMI 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> ap = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new CallSt(nm,ap); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= READ LPAREN lvalue lvalueRec RPAREN SEMI 
            {
              Stmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		Lvalue l = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int llleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Lvalue> ll = (List<Lvalue>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new ReadSt(add(l,ll)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= READ LPAREN lvalue RPAREN SEMI 
            {
              Stmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Lvalue l = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new ReadSt(add(l,nil)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= WRITE write_params SEMI 
            {
              Stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> w = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new WriteSt(w); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= IF expression THEN statementRec END SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> st = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new IfSt(e,new SeqSt(st),null); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= IF expression THEN statementRec elsif_lst ELSE statementRec END SEMI 
            {
              Stmt RESULT =null;
		int st2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> st2 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= IF expression THEN statementRec ELSE statementRec END SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		List<Stmt> st1 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> st2 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new IfSt(e,new SeqSt(st1),new SeqSt(st2)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-7)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= WHILE expression DO statementRec END SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> st = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new WhileSt(e,new SeqSt(st)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= WHILE expression DO END SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		 RESULT = new WhileSt(e,null); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= LOOP statementRec END SEMI 
            {
              Stmt RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> st = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new LoopSt(new SeqSt(st)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= LOOP END SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new LoopSt(null); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= FOR ID ASGN expression TO expression BY expression DO END SEMI 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-7)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		 RESULT = new ForSt(nm,e1,e2,e3,null); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-10)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= FOR ID ASGN expression TO expression DO statementRec END SEMI 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> st = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new ForSt(nm,e1,e2,null,new SeqSt(st)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= FOR ID ASGN expression TO expression BY expression DO statementRec END SEMI 
            {
              Stmt RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-10)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-10)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Stmt> st = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		 RESULT = new ForSt(nm,e1,e2,e3,new SeqSt(st)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-11)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= EXIT SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new ExitSt(); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= RETURN expression SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ReturnValueSt(e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new ReturnSt(); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lvalueRec ::= lvalueRec COMMA lvalue 
            {
              List<Lvalue> RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Lvalue> ll = (List<Lvalue>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Lvalue l = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(ll,l); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalueRec",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lvalueRec ::= COMMA lvalue 
            {
              List<Lvalue> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Lvalue l = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(nil,l); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalueRec",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elsif_lst ::= elsif_lst ELSIF expression THEN statementRec 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("elsif_lst",37, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elsif_lst ::= ELSIF expression THEN statementRec 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("elsif_lst",37, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // write_params ::= LPAREN write_expr RPAREN 
            {
              List<Expr> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr w = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(w,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // write_params ::= LPAREN write_expr write_paramsRec RPAREN 
            {
              List<Expr> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr w = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> wl = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(w,wl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // write_params ::= LPAREN RPAREN 
            {
              List<Expr> RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // write_paramsRec ::= write_paramsRec COMMA write_expr 
            {
              List<Expr> RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Expr> wl = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr w = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(wl,w); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_paramsRec",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // write_paramsRec ::= COMMA write_expr 
            {
              List<Expr> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr w = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(nil,w); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_paramsRec",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // write_expr ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new StringConst(s); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // write_expr ::= expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = e; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new IntConst(n); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= REAL_LITERAL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new RealConst(n); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= lvalue 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Lvalue l = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new LvalExp(l); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = e; 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= MINUS expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= NOT expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new UnOpExp("not",e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression PLUS expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("plus",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression MINUS expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("minus",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression TIMES expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("times",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression SLASH expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("slash",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression DIV expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("div",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression MOD expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("mod",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression OR expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("or",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression AND expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("and",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression GT expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("gt",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expression LT expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("lt",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression EQ expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("eq",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= expression GEQ expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("geq",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= expression LEQ expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("leq",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= expression NEQ expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new BinOpExp("neq",e1,e2); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= ID actual_params 
            {
              Expr RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ap = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new CallExp(nm,ap); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= ID record_inits 
            {
              Expr RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int rileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int riright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<String,Expr>> ri = (List<Tuple2<String,Expr>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new RecordExp(nm,ri); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= ID array_inits 
            {
              Expr RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Tuple2<Expr,Expr>> ai = (List<Tuple2<Expr,Expr>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new ArrayExp(nm,ai); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lvalue ::= ID 
            {
              Lvalue RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new Var(nm); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lvalue ::= lvalue LSQBRA expression RSQBRA 
            {
              Lvalue RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).right;
		Lvalue l = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ArrayDeref(l,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lvalue ::= lvalue DOT ID 
            {
              Lvalue RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Lvalue l = (Lvalue)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = new RecordDeref(l,nm); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // actual_params ::= LPAREN expression actual_paramsRec RPAREN 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int aplleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> apl = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(e,apl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // actual_params ::= LPAREN expression RPAREN 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(e,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // actual_params ::= LPAREN RPAREN 
            {
              List<Expr> RESULT =null;
		 RESULT = add(null,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // actual_paramsRec ::= actual_paramsRec COMMA expression 
            {
              List<Expr> RESULT =null;
		int aplleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Expr> apl = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(apl,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_paramsRec",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // actual_paramsRec ::= COMMA expression 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(nil,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_paramsRec",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // record_inits ::= LCUBRA ID ASGN expression record_initsRec RCUBRA 
            {
              List<Tuple2<String,Expr>> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int rilleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int rilright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Tuple2<String,Expr>> ril = (List<Tuple2<String,Expr>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = append(ril,add(nm,add(e,nil))); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // record_initsRec ::= record_initsRec SEMI ID ASGN expression 
            {
              List<Tuple2<String,Expr>> RESULT =null;
		int rilleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).left;
		int rilright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).right;
		List<Tuple2<String,Expr>> ril = (List<Tuple2<String,Expr>>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(ril,append(add(nm,nil),e)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_initsRec",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // record_initsRec ::= SEMI ID ASGN expression 
            {
              List<Tuple2<String,Expr>> RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(add(nm,nil),e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_initsRec",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // array_inits ::= LCUBRA array_inits_type RCUBRA 
            {
              List<Tuple2<Expr,Expr>> RESULT =null;
		int ailleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int ailright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> ail = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = append(ail,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // array_inits ::= LCUBRA RCUBRA 
            {
              List<Tuple2<Expr,Expr>> RESULT =null;
		 RESULT = add(null,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // array_inits_type ::= array_init array_initsRec 
            {
              List<Expr> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int airight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> ai = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int ailleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int ailright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ail = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(ai,ail); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits_type",43, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // array_inits_type ::= array_init 
            {
              List<Expr> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ai = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(ai,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits_type",43, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // array_initsRec ::= array_initsRec COMMA array_init 
            {
              List<Expr> RESULT =null;
		int ailleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).left;
		int ailright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).right;
		List<Expr> ail = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ai = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(ail,ai); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_initsRec",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // array_initsRec ::= COMMA array_init 
            {
              List<Expr> RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		List<Expr> ai = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(null,ai); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_initsRec",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // array_init ::= array_init_type expression 
            {
              List<Expr> RESULT =null;
		int aitleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int aitright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Expr> ait = (List<Expr>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(ait,e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // array_init ::= expression 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(e,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // array_init_type ::= expression OF 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = add(e,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init_type",44, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PcatParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
              return CUP$PcatParser$do_action_part00000000(
                               CUP$PcatParser$act_num,
                               CUP$PcatParser$parser,
                               CUP$PcatParser$stack,
                               CUP$PcatParser$top);
    }
}

}
