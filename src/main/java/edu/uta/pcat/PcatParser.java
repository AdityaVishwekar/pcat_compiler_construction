
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package edu.uta.pcat;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PcatParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PcatParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PcatParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PcatParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\006\000\002\003" +
    "\005\000\002\006\003\000\002\006\004\000\002\005\005" +
    "\000\002\005\004\000\002\021\005\000\002\021\006\000" +
    "\002\022\005\000\002\022\003\000\002\020\003\000\002" +
    "\020\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\005\000\002\004\004\000\002\004\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\017\010\000\002\017\005\000\002" +
    "\015\005\000\002\015\006\000\002\015\004\000\002\016" +
    "\005\000\002\016\004\000\002\013\010\000\002\013\007" +
    "\000\002\014\010\000\002\014\006\000\002\011\004\000" +
    "\002\011\005\000\002\011\007\000\002\012\003\000\002" +
    "\012\005\000\002\010\003\000\002\010\005\000\002\007" +
    "\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\004\033\005\001\002\000\004\002\152\001" +
    "\002\000\004\024\006\001\002\000\004\012\010\001\002" +
    "\000\004\061\151\001\002\000\004\036\012\001\002\000" +
    "\006\020\150\036\012\001\002\000\020\004\021\006\025" +
    "\007\015\027\022\047\014\061\017\064\023\001\002\000" +
    "\006\020\ufffe\036\ufffe\001\002\000\016\004\021\006\025" +
    "\007\015\027\022\047\014\064\023\001\002\000\052\010" +
    "\uffca\014\uffca\026\uffca\030\uffca\031\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\061\uffca\062\uffca\065\uffca\067\uffca\071\uffca" +
    "\001\002\000\052\010\ufff4\014\ufff4\026\ufff4\030\ufff4\031" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\061\ufff4\062\ufff4\065" +
    "\ufff4\067\ufff4\071\ufff4\001\002\000\006\020\ufffb\036\ufffb" +
    "\001\002\000\040\010\033\014\042\026\035\031\047\046" +
    "\037\047\032\050\043\051\034\052\046\053\050\054\041" +
    "\055\045\056\040\057\036\061\145\001\002\000\056\010" +
    "\uffde\014\uffde\026\uffde\030\uffde\031\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\061\uffde\062\uffde\064\100\065\uffde\067\uffde" +
    "\070\074\071\uffde\001\002\000\016\004\021\006\025\007" +
    "\015\027\022\047\014\064\023\001\002\000\016\004\021" +
    "\006\025\007\015\027\022\047\014\064\023\001\002\000" +
    "\056\010\ufff3\014\ufff3\026\ufff3\030\ufff3\031\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\061\ufff3\062\ufff3\063\027\065\ufff3" +
    "\066\026\067\ufff3\071\ufff3\001\002\000\052\010\uffcb\014" +
    "\uffcb\026\uffcb\030\uffcb\031\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\061\uffcb\062\uffcb\065\uffcb\067\uffcb\071\uffcb\001\002" +
    "\000\016\004\021\006\025\007\015\027\022\047\014\064" +
    "\023\001\002\000\004\004\030\001\002\000\056\010\uffdc" +
    "\014\uffdc\026\uffdc\030\uffdc\031\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\061\uffdc\062\uffdc\063\uffdc\065\uffdc\066\uffdc\067" +
    "\uffdc\071\uffdc\001\002\000\040\010\033\014\042\026\035" +
    "\031\047\046\037\047\032\050\043\051\034\052\046\053" +
    "\050\054\041\055\045\056\040\057\036\067\044\001\002" +
    "\000\016\004\021\006\025\007\015\027\022\047\014\064" +
    "\023\001\002\000\016\004\021\006\025\007\015\027\022" +
    "\047\014\064\023\001\002\000\016\004\021\006\025\007" +
    "\015\027\022\047\014\064\023\001\002\000\016\004\021" +
    "\006\025\007\015\027\022\047\014\064\023\001\002\000" +
    "\016\004\021\006\025\007\015\027\022\047\014\064\023" +
    "\001\002\000\016\004\021\006\025\007\015\027\022\047" +
    "\014\064\023\001\002\000\016\004\021\006\025\007\015" +
    "\027\022\047\014\064\023\001\002\000\016\004\021\006" +
    "\025\007\015\027\022\047\014\064\023\001\002\000\016" +
    "\004\021\006\025\007\015\027\022\047\014\064\023\001" +
    "\002\000\016\004\021\006\025\007\015\027\022\047\014" +
    "\064\023\001\002\000\004\062\055\001\002\000\016\004" +
    "\021\006\025\007\015\027\022\047\014\064\023\001\002" +
    "\000\016\004\021\006\025\007\015\027\022\047\014\064" +
    "\023\001\002\000\016\004\021\006\025\007\015\027\022" +
    "\047\014\064\023\001\002\000\016\004\021\006\025\007" +
    "\015\027\022\047\014\064\023\001\002\000\052\010\uffe3" +
    "\014\042\026\035\030\uffe3\031\uffe3\046\037\047\032\050" +
    "\043\051\034\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\061\uffe3\062\uffe3\065\uffe3\067\uffe3\071\uffe3\001" +
    "\002\000\052\010\033\014\042\026\035\030\uffe9\031\047" +
    "\046\037\047\032\050\043\051\034\052\046\053\050\054" +
    "\041\055\045\056\040\057\036\061\uffe9\062\uffe9\065\uffe9" +
    "\067\uffe9\071\uffe9\001\002\000\052\010\uffe6\014\042\026" +
    "\035\030\uffe6\031\uffe6\046\037\047\032\050\043\051\034" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\061" +
    "\uffe6\062\uffe6\065\uffe6\067\uffe6\071\uffe6\001\002\000\052" +
    "\010\uffe4\014\042\026\035\030\uffe4\031\uffe4\046\037\047" +
    "\032\050\043\051\034\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\061\uffe4\062\uffe4\065\uffe4\067\uffe4\071" +
    "\uffe4\001\002\000\004\004\056\001\002\000\056\010\uffdd" +
    "\014\uffdd\026\uffdd\030\uffdd\031\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\061\uffdd\062\uffdd\063\uffdd\065\uffdd\066\uffdd\067" +
    "\uffdd\071\uffdd\001\002\000\052\010\uffed\014\uffed\026\uffed" +
    "\030\uffed\031\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\061\uffed" +
    "\062\uffed\065\uffed\067\uffed\071\uffed\001\002\000\052\010" +
    "\uffeb\014\uffeb\026\uffeb\030\uffeb\031\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\061\uffeb\062\uffeb\065\uffeb\067\uffeb\071\uffeb" +
    "\001\002\000\052\010\uffe7\014\042\026\035\030\uffe7\031" +
    "\uffe7\046\037\047\032\050\043\051\034\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\061\uffe7\062\uffe7\065" +
    "\uffe7\067\uffe7\071\uffe7\001\002\000\052\010\uffe5\014\042" +
    "\026\035\030\uffe5\031\uffe5\046\037\047\032\050\043\051" +
    "\034\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\061\uffe5\062\uffe5\065\uffe5\067\uffe5\071\uffe5\001\002\000" +
    "\052\010\uffef\014\042\026\035\030\uffef\031\uffef\046\uffef" +
    "\047\uffef\050\043\051\034\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\061\uffef\062\uffef\065\uffef\067\uffef" +
    "\071\uffef\001\002\000\052\010\uffe2\014\042\026\035\030" +
    "\uffe2\031\uffe2\046\037\047\032\050\043\051\034\052\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\061\uffe2\062" +
    "\uffe2\065\uffe2\067\uffe2\071\uffe2\001\002\000\052\010\uffea" +
    "\014\uffea\026\uffea\030\uffea\031\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea" +
    "\057\uffea\061\uffea\062\uffea\065\uffea\067\uffea\071\uffea\001" +
    "\002\000\052\010\uffec\014\uffec\026\uffec\030\uffec\031\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\061\uffec\062\uffec\065\uffec" +
    "\067\uffec\071\uffec\001\002\000\052\010\033\014\042\026" +
    "\035\030\uffe8\031\uffe8\046\037\047\032\050\043\051\034" +
    "\052\046\053\050\054\041\055\045\056\040\057\036\061" +
    "\uffe8\062\uffe8\065\uffe8\067\uffe8\071\uffe8\001\002\000\052" +
    "\010\uffee\014\042\026\035\030\uffee\031\uffee\046\uffee\047" +
    "\uffee\050\043\051\034\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\061\uffee\062\uffee\065\uffee\067\uffee\071" +
    "\uffee\001\002\000\040\010\033\014\042\026\035\031\047" +
    "\046\037\047\032\050\043\051\034\052\046\053\050\054" +
    "\041\055\045\056\040\057\036\065\072\001\002\000\052" +
    "\010\ufff2\014\ufff2\026\ufff2\030\ufff2\031\ufff2\046\ufff2\047" +
    "\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\061\ufff2\062\ufff2\065\ufff2\067\ufff2\071" +
    "\ufff2\001\002\000\052\010\ufff0\014\042\026\035\030\ufff0" +
    "\031\ufff0\046\037\047\032\050\043\051\034\052\046\053" +
    "\050\054\041\055\045\056\040\057\036\061\ufff0\062\ufff0" +
    "\065\ufff0\067\ufff0\071\ufff0\001\002\000\020\004\115\006" +
    "\025\007\015\027\022\047\014\064\023\071\113\001\002" +
    "\000\052\010\uffe1\014\uffe1\026\uffe1\030\uffe1\031\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\061\uffe1\062\uffe1\065\uffe1\067" +
    "\uffe1\071\uffe1\001\002\000\052\010\uffdf\014\uffdf\026\uffdf" +
    "\030\uffdf\031\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\061\uffdf" +
    "\062\uffdf\065\uffdf\067\uffdf\071\uffdf\001\002\000\052\010" +
    "\uffe0\014\uffe0\026\uffe0\030\uffe0\031\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\061\uffe0\062\uffe0\065\uffe0\067\uffe0\071\uffe0" +
    "\001\002\000\020\004\021\006\025\007\015\027\022\047" +
    "\014\064\023\065\102\001\002\000\042\010\033\014\042" +
    "\026\035\031\047\046\037\047\032\050\043\051\034\052" +
    "\046\053\050\054\041\055\045\056\040\057\036\062\104" +
    "\065\105\001\002\000\052\010\uffd9\014\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\061\uffd9\062" +
    "\uffd9\065\uffd9\067\uffd9\071\uffd9\001\002\000\006\062\107" +
    "\065\110\001\002\000\016\004\021\006\025\007\015\027" +
    "\022\047\014\064\023\001\002\000\052\010\uffdb\014\uffdb" +
    "\026\uffdb\030\uffdb\031\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\061\uffdb\062\uffdb\065\uffdb\067\uffdb\071\uffdb\001\002\000" +
    "\042\010\033\014\042\026\035\031\047\046\037\047\032" +
    "\050\043\051\034\052\046\053\050\054\041\055\045\056" +
    "\040\057\036\062\uffd7\065\uffd7\001\002\000\016\004\021" +
    "\006\025\007\015\027\022\047\014\064\023\001\002\000" +
    "\052\010\uffda\014\uffda\026\uffda\030\uffda\031\uffda\046\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\061\uffda\062\uffda\065\uffda\067\uffda" +
    "\071\uffda\001\002\000\042\010\033\014\042\026\035\031" +
    "\047\046\037\047\032\050\043\051\034\052\046\053\050" +
    "\054\041\055\045\056\040\057\036\062\uffd8\065\uffd8\001" +
    "\002\000\006\062\136\071\137\001\002\000\052\010\uffd2" +
    "\014\uffd2\026\uffd2\030\uffd2\031\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\061\uffd2\062\uffd2\065\uffd2\067\uffd2\071\uffd2\001" +
    "\002\000\044\010\033\014\042\026\035\030\134\031\047" +
    "\046\037\047\032\050\043\051\034\052\046\053\050\054" +
    "\041\055\045\056\040\057\036\062\uffcd\071\uffcd\001\002" +
    "\000\052\010\uffde\014\uffde\026\uffde\030\uffde\031\uffde\045" +
    "\116\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\057\uffde\062\uffde\064\100\070" +
    "\074\071\uffde\001\002\000\016\004\021\006\025\007\015" +
    "\027\022\047\014\064\023\001\002\000\042\010\033\014" +
    "\042\026\035\031\047\046\037\047\032\050\043\051\034" +
    "\052\046\053\050\054\041\055\045\056\040\057\036\061" +
    "\121\071\120\001\002\000\052\010\uffd5\014\uffd5\026\uffd5" +
    "\030\uffd5\031\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\061\uffd5" +
    "\062\uffd5\065\uffd5\067\uffd5\071\uffd5\001\002\000\004\004" +
    "\131\001\002\000\006\062\124\071\123\001\002\000\052" +
    "\010\uffd6\014\uffd6\026\uffd6\030\uffd6\031\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\061\uffd6\062\uffd6\065\uffd6\067\uffd6\071" +
    "\uffd6\001\002\000\004\061\125\001\002\000\004\004\126" +
    "\001\002\000\004\045\127\001\002\000\016\004\021\006" +
    "\025\007\015\027\022\047\014\064\023\001\002\000\042" +
    "\010\033\014\042\026\035\031\047\046\037\047\032\050" +
    "\043\051\034\052\046\053\050\054\041\055\045\056\040" +
    "\057\036\062\uffd4\071\uffd4\001\002\000\004\045\132\001" +
    "\002\000\016\004\021\006\025\007\015\027\022\047\014" +
    "\064\023\001\002\000\042\010\033\014\042\026\035\031" +
    "\047\046\037\047\032\050\043\051\034\052\046\053\050" +
    "\054\041\055\045\056\040\057\036\062\uffd3\071\uffd3\001" +
    "\002\000\016\004\021\006\025\007\015\027\022\047\014" +
    "\064\023\001\002\000\042\010\033\014\042\026\035\031" +
    "\047\046\037\047\032\050\043\051\034\052\046\053\050" +
    "\054\041\055\045\056\040\057\036\062\uffcc\071\uffcc\001" +
    "\002\000\016\004\021\006\025\007\015\027\022\047\014" +
    "\064\023\001\002\000\052\010\uffd1\014\uffd1\026\uffd1\030" +
    "\uffd1\031\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\061\uffd1\062" +
    "\uffd1\065\uffd1\067\uffd1\071\uffd1\001\002\000\006\062\143" +
    "\071\142\001\002\000\006\062\uffcf\071\uffcf\001\002\000" +
    "\052\010\uffd0\014\uffd0\026\uffd0\030\uffd0\031\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\061\uffd0\062\uffd0\065\uffd0\067\uffd0" +
    "\071\uffd0\001\002\000\016\004\021\006\025\007\015\027" +
    "\022\047\014\064\023\001\002\000\006\062\uffce\071\uffce" +
    "\001\002\000\006\020\ufffc\036\ufffc\001\002\000\052\010" +
    "\033\014\042\026\035\030\ufff1\031\047\046\037\047\032" +
    "\050\043\051\034\052\046\053\050\054\041\055\045\056" +
    "\040\057\036\061\ufff1\062\ufff1\065\ufff1\067\ufff1\071\ufff1" +
    "\001\002\000\006\020\ufffd\036\ufffd\001\002\000\004\061" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\002\001\001" +
    "\000\006\005\012\006\010\001\001\000\004\005\146\001" +
    "\001\000\010\004\017\007\015\017\023\001\001\000\002" +
    "\001\001\000\010\004\145\007\015\017\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\075\013\076\015\074\001\001\000" +
    "\010\004\072\007\015\017\023\001\001\000\010\004\070" +
    "\007\015\017\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\030\007\015\017\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\067\007\015\017\023\001\001\000\010\004\066\007\015" +
    "\017\023\001\001\000\010\004\065\007\015\017\023\001" +
    "\001\000\010\004\064\007\015\017\023\001\001\000\010" +
    "\004\063\007\015\017\023\001\001\000\010\004\062\007" +
    "\015\017\023\001\001\000\010\004\061\007\015\017\023" +
    "\001\001\000\010\004\060\007\015\017\023\001\001\000" +
    "\010\004\057\007\015\017\023\001\001\000\010\004\056" +
    "\007\015\017\023\001\001\000\002\001\001\000\010\004" +
    "\053\007\015\017\023\001\001\000\010\004\052\007\015" +
    "\017\023\001\001\000\010\004\051\007\015\017\023\001" +
    "\001\000\010\004\050\007\015\017\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\113" +
    "\007\015\010\111\017\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\100\007\015" +
    "\017\023\001\001\000\004\016\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\105\007\015\017\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\110\007\015\017\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\075\013\076\015\074\001\001\000\010" +
    "\004\116\007\015\017\023\001\001\000\004\014\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\127\007\015\017\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\132\007" +
    "\015\017\023\001\001\000\002\001\001\000\010\004\134" +
    "\007\015\017\023\001\001\000\002\001\001\000\014\004" +
    "\113\007\015\010\140\012\137\017\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\113\007\015\010\143\017\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PcatParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PcatParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PcatParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.REAL_LITERAL,
      sym.AND, sym.ARRAY, sym.BEGIN, sym.BY, sym.DIV, sym.DO, sym.ELSE, sym.ELSIF, sym.END,
      sym.EXIT, sym.FOR, sym.IF, sym.IS, sym.LOOP, sym.MOD, sym.NOT, sym.OF, sym.OR,
      sym.PROCEDURE, sym.PROGRAM, sym.READ, sym.RECORD, sym.RETURN, sym.THEN, sym.TO,
      sym.TYPE, sym.VAR, sym.WHILE, sym.WRITE, sym.ASGN, sym.PLUS, sym.MINUS, sym.TIMES, sym.SLASH,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI, sym.COMMA, sym.DOT,
      sym.LPAREN, sym.RPAREN, sym.LSQBRA, sym.RSQBRA, sym.LCUBRA, sym.RCUBRA
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "REAL_LITERAL",
      "AND", "ARRAY", "BEGIN", "BY", "DIV", "DO", "ELSE", "ELSIF", "END",
      "EXIT", "FOR", "IF", "IS", "LOOP", "MOD", "NOT", "OF", "OR",
      "PROCEDURE", "PROGRAM", "READ", "RECORD", "RETURN", "THEN", "TO",
      "TYPE", "VAR", "WHILE", "WRITE", "ASGN :=", "PLUS +", "MINUS -", "TIMES *", "SLASH /",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ =", "NEQ <>", "COLON :", "SEMI ;", "COMMA ,", "DOT .",
      "LPAREN (", "RPAREN )", "LSQBRA [", "RSQBRA ]", "LCUBRA "+'{', "RCUBRA "+'}'
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PcatParser$actions {
  private final PcatParser parser;

  /** Constructor */
  CUP$PcatParser$actions(PcatParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action_part00000000(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PcatParser$result;

      /* select the action based on the action number */
      switch (CUP$PcatParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		RESULT = start_val;
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PcatParser$parser.done_parsing();
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IS body SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 PCAT.setAST(new ProcDecl("main","NoType",nil,b)); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= BEGIN statement_lst END 
            {
              Body RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new Body(nil,sl); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_lst ::= statement 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = add(s,nil); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_lst",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_lst ::= statement_lst statement 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;
		 RESULT = append(sl,s); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_lst",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= RETURN expression SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		 RESULT = new ReturnValueSt(e); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= RETURN SEMI 
            {
              Stmt RESULT =null;
		 RESULT = new ReturnSt(); 
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // write_params ::= LPAREN write_expr RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // write_params ::= LPAREN write_expr write_params1 RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // write_params1 ::= write_params1 COMMA write_expr 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params1",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // write_params1 ::= write_expr 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params1",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // write_expr ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // write_expr ::= expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= number 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= lvalue 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= MINUS expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= NOT expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= expression PLUS expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= expression MINUS expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= expression TIMES expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= expression SLASH expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= expression DIV expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression MOD expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression OR expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression AND expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression GT expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression LT expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression EQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression GEQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression LEQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression NEQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= ID actual_params 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= ID record_inits 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= ID array_inits 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= ID 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lvalue ::= lvalue LSQBRA expression RSQBRA COMMA ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lvalue ::= lvalue DOT ID 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // actual_params ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // actual_params ::= LPAREN expression actual_params1 RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // actual_params ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // actual_params1 ::= actual_params1 COMMA expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params1",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // actual_params1 ::= COMMA expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params1",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // record_inits ::= LCUBRA ID ASGN expression record_inits1 RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // record_inits ::= LCUBRA ID ASGN expression RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // record_inits1 ::= record_inits1 COMMA SEMI ID ASGN expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits1",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // record_inits1 ::= SEMI ID ASGN expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits1",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // array_inits ::= LCUBRA RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array_inits ::= LCUBRA array_init RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array_inits ::= LCUBRA array_init COMMA array_inits1 RCUBRA 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_inits1 ::= array_init 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits1",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array_inits1 ::= array_inits1 COMMA array_init 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits1",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // array_init ::= expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // array_init ::= expression OF expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // number ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // number ::= REAL_LITERAL 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PcatParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
              return CUP$PcatParser$do_action_part00000000(
                               CUP$PcatParser$act_num,
                               CUP$PcatParser$parser,
                               CUP$PcatParser$stack,
                               CUP$PcatParser$top);
    }
}

}
